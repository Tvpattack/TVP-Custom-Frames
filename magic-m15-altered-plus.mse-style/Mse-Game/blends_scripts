	# Scripts for blending images
	# Included by a style file in its init script
	
	########################################################################
	# Filenames and other defaults
	########################################################################
	
	########################################################################
	# Combining multiple colors (hybrids)
	########################################################################
	# This script has been expanded to handle more color choices.
	horizontal_card_hybrid := [
		1: { template(colors[0]) }
		2: card_hybrid_2
		3: {linear_blend(
			image1: template(colors[0])
			x1: 0.22,  y1: 0
			x2: 0.4,   y2: 0
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.6,   y1: 0
			  x2: 0.78,  y2: 0
			  image2: template(colors[2])
		   ))}
		4: {linear_blend(
			# blend = 0.16
			image1: template(colors[0])
			x1: 0.15,  y1: 0
			x2: 0.31,  y2: 0
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.42,  y1: 0
			  x2: 0.58,  y2: 0
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 0.69, y1: 0
			    x2: 0.85, y2: 0
			    image2: template(colors[3])
		   )))}
		5: {linear_blend(
			image1: template(colors[0])
			x1: 2.0 / 15,  y1: 0
			x2: 4.0 / 15,  y2: 0
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 5.0 / 15,  y1: 0
			  x2: 7.0 / 15,  y2: 0
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1:  8.0 / 15,  y1: 0
			    x2: 10.0 / 15,  y2: 0
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 11.0 / 15,  y1: 0
			      x2: 13.0 / 15,  y2: 0
			      image2: template(colors[4])
		   ))))}
		6: {linear_blend(
			image1: template(colors[0])
			x1: 1.5 / 15,  y1: 0
			x2: 3.1 / 15,  y2: 0
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 4.1 / 15,  y1: 0
			  x2: 5.7 / 15,  y2: 0
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 6.7 / 15,  y1: 0
			    x2: 8.3 / 15,  y2: 0
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 9.3 / 15,  y1: 0
			      x2: 10.9 / 15,  y2: 0
			      image2: linear_blend(
			        image1: template(colors[4])
			        x1: 11.9 / 15, y1: 0
			        x2: 13.5 / 15, y2: 0
			        image2: template(colors[5])
		   )))))}
		7: {linear_blend(
			image1: template(colors[0])
			x1: 1.3 / 15,  y1: 0
			x2: 2.7 / 15,  y2: 0
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 3.5 / 15,  y1: 0
			  x2: 4.9 / 15,  y2: 0
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 5.7 / 15,  y1: 0
			    x2: 7.1 / 15,  y2: 0
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 7.9 / 15,  y1: 0
			      x2: 9.3 / 15,  y2: 0
			      image2: linear_blend(
			        image1: template(colors[4])
			        x1: 10.1 / 15, y1: 0
			        x2: 11.5 / 15, y2: 0
			        image2: linear_blend(
			          image1: template(colors[5])
			          x1: 12.3 / 15, y1: 0
			          x2: 13.7 / 15, y2: 0
			          image2: template(colors[6])
		   ))))))}
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	# This script doesn't exist in magic-blends.
	diagonal_card_hybrid := [
		1: { template(colors[0]) }
		2: {linear_blend(
			image1: template(colors[0]),
			image2: template(colors[1]),
			x1: 0.40, y1: 0.50
			x2: 0.60, y2: 0.60
		   )}
		3: {linear_blend(
			image1: linear_blend(
				image1: template(colors[0]),
				image2: template(colors[1]),
				x1: 0.15, y1: 0.50
				x2: 0.35, y2: 0.60),
			image2: template(colors[2]),
				x1: 0.65, y1: 0.50
				x2: 0.85, y2: 0.60
		   )}
		4: { linear_blend(
			image1: linear_blend(
				image1: template(colors[0]),
				image2: template(colors[1]),
				x1: -0.10, y1: 0.50
				x2: 0.10, y2: 0.60),
			image2: linear_blend(
				image1: template(colors[2]),
				image2: template(colors[3]),
				x1: 0.90, y1: 0.50
				x2: 1.10, y2: 0.60),
			x1: 0.40, y1: 0.50
			x2: 0.60, y2: 0.60
		   )}
		5: {linear_blend(
			image1: linear_blend(
				image1: linear_blend(
					image1: linear_blend(
						image1: template(colors[0]),
						image2: template(colors[1]),
						x1: -0.20, y1: 0.50
						x2: 0.00, y2: 0.60),
					image2: template(colors[2]),
					x1: 0.15, y1: 0.50
					x2: 0.35, y2: 0.60),
				image2: template(colors[3]),
				x1: 0.65, y1: 0.50
				x2: 0.85, y2: 0.60),
			image2: template(colors[4]),
			x1: 1.00, y1: 0.50
			x2: 1.20, y2: 0.60
		   )}
		6: {linear_blend(
			image1: linear_blend(
				image1: linear_blend(
					image1: linear_blend(
						image1: linear_blend(
							image1: template(colors[0]),
							image2: template(colors[1]),
							x1: -0.30, y1: 0.50
							x2: -0.10, y2: 0.60),
						image2: template(colors[2]),
						x1: 0.10, y1: 0.50
						x2: 0.20, y2: 0.60),
					image2: template(colors[3]),
					x1: 0.40, y1: 0.50
					x2: 0.60, y2: 0.60),
				image2: template(colors[4]),
				x1: 0.70, y1: 0.50
				x2: 0.90, y2: 0.60),
			image2: template(colors[5]),
			x1: 1.10, y1: 0.50
			x2: 1.30, y2: 0.60
		   )}
		7: { template("m") }
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	card_hybrid := [
		radial: [
			0: { template("c") }
			1: { template(colors[0]) }
			2: card_hybrid_2
			3: {linear_blend(
				image1: card_hybrid_2(colors: colors[0] + colors[1]),
				image2: template(colors[2]),
				x1: 0,  y1: 0.55
				x2: 0,  y2: 0.77
			   )}
			4: {linear_blend(
				image1: card_hybrid_2(colors: colors[0] + colors[1])
				image2: card_hybrid_2(colors: colors[3] + colors[2])
				x1: 0,  y1: 0.4
				x2: 0,  y2: 0.62
			   )}
			5: {linear_blend(
				image1: linear_blend(
					image1: card_hybrid_2(colors: colors[0] + colors[1]),
					image2: card_hybrid_2(colors: colors[4] + colors[2]),
					x1: 0,  y1: 0.19
					x2: 0,  y2: 0.35
				),
				image2: template(colors[3]),
				x1: 0,  y1: 0.777
				x2: 0,  y2: 0.937
			   )}
			6: {linear_blend(
				image1: linear_blend(
					image1: card_hybrid_2(colors: colors[0] + colors[1]),
					image2: card_hybrid_2(colors: colors[5] + colors[2]),
					x1: 0,  y1: 0.19
					x2: 0,  y2: 0.35
				),
				image2: card_hybrid_2(colors: colors[4] + colors[3]),
				x1: 0,  y1: 0.777
				x2: 0,  y2: 0.937
			   )}
			7: {linear_blend(
				image1: linear_blend(
					image1: linear_blend(
						image1: card_hybrid_2(colors: colors[0] + colors[1]),
						image2: card_hybrid_2(colors: colors[6] + colors[3]),
						x1: 0,  y1: 0.34
						x2: 0,  y2: 0.50
					),
					image2: card_hybrid_2(colors: colors[5] + colors[3]),
					x1: 0,  y1: 0.877
					x2: 0,  y2: 0.937
				),
				image2: template(colors[4]),
				x1: 0,  y1: 1.140
				x2: 0,  y2: 1.300
			   )}
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		horizontal: horizontal_card_hybrid
		diagonal: diagonal_card_hybrid
		vertical: [
			1: { template(colors[0]) }
			2: { linear_blend(
				image1: template(colors[0])
				image2: template(colors[1])
				x1: 0,  y1: 0.4
				x2: 0,  y2: 0.6
			   )}
			3: vertical_card_hybrid
			4: vertical_card_hybrid
			5: vertical_card_hybrid
			6: vertical_card_hybrid
			7: vertical_card_hybrid
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		overlay: overlay_hybrid
	]
	
	########################################################################
	# P/T box
	########################################################################
	# These are easier
	# This script has been expanded to handle more color choices.
	horizontal_pt_hybrid := [
		1: { template(colors[0]) }
		2: { template(colors[1]) }
		3: { linear_blend(
			image1: template(colors[1])
			image2: template(colors[2])
			x1: -0.51, y1: 0
			x2:  0.26, y2: 0
		   )}
		4: { linear_blend(
			image1: template(colors[2])
			image2: template(colors[3])
			x1: -0.1,  y1: 0
			x2:  0.6,  y2: 0
		   )}
		5: { linear_blend(
			image1: template(colors[3])
			image2: template(colors[4])
			x1: 0.08,  y1: 0
			x2: 0.65,  y2: 0
		   )}
		6: { linear_blend(
			image1: template(colors[4])
			image2: template(colors[5])
			x1: 0.07, y1: 0
			x2: 0.7, y2: 0
		   )}
		7: {linear_blend(
			image1: linear_blend(
				image1: template(colors[4]),
				image2: template(colors[5]),
				x1: -0.2,  y1: 0
				x2: 0.2,  y2: 0
			),
			image2: template(colors[6]),
			x1: 0.5,  y1: 0
			x2: 0.7,  y2: 0
		   )}
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	# This script doesn't exist in magic-blends.
	diagonal_pt_hybrid := [
		1: { template(colors[0]) }
		2: { template(colors[1]) }
		3: { template(colors[2]) }
		4: { template(colors[3]) }
		5: { linear_blend(
			image1: template(colors[3]),
			image2: template(colors[4]),
			x1: -0.10, y1: 0.50
			x2: 0.10, y2: 0.60
		   )}
		6: { linear_blend(
			image1: template(colors[4]),
			image2: template(colors[5]),
			x1: 0.10, y1: 0.50
			x2: 0.30, y2: 0.60
		   )}
		7: { template("m") }
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	pt_hybrid := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[2]) }
			4: { template(colors[2]) }
			5: { linear_blend(
				image1: template(colors[2])
				image2: template(colors[3])
				x1: 0, y1: -1.5
				x2: 0, y2: 0.7
			   )}
			6: { linear_blend(
				image1: template(colors[2])
				image2: template(colors[3])
				x1: 0, y1: -1.5
				x2: 0, y2: 0.7
			   )}
			7: { template(colors[3]) }
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		horizontal: horizontal_pt_hybrid
		diagonal: diagonal_pt_hybrid
		vertical: [
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[2]) }
			4: { template(colors[3]) }
			5: { template(colors[4]) }
			6: { template(colors[5]) }
			7: { template(colors[6]) }
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		overlay: overlay_hybrid
	]
	
	########################################################################
	# P/T boxes of flip cards
	########################################################################
	#
	########################################################################
	# P/T boxes for leveler cards
	########################################################################
	#
	########################################################################
	# Textbox and typeline for FPM templates and Futureshifts
	########################################################################
	#
	########################################################################
	# Color Identity Marking
	########################################################################
	# This script has been expanded to handle more color choices.
	identity_horizontal_hybrid := [
		0: { template("c") }
		1: { template(colors[0]) }
		2: { linear_blend(
			image1: template(colors[0])
			image2: template(colors[1])
			x1: 0.49,  y1: 0.49
			x2: 0.5,  y2: 0.5
		   )}
		3: {linear_blend(
			image1: template(colors[0])
			x1: 0.39,  y1: 0.39
			x2: 0.4,   y2: 0.4
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.6,   y1: 0.6
			  x2: 0.61,  y2: 0.61
			  image2: template(colors[2])
		   ))}
		4: {linear_blend(
			# blend = 0.16
			image1: template(colors[0])
			x1: 0.29,  y1: 0.29
			x2: 0.3,  y2: 0.3
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.49,  y1: 0.49
			  x2: 0.50,  y2: 0.5
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 0.69, y1: 0.69
			    x2: 0.7, y2: 0.7
			    image2: template(colors[3])
		   )))}
		5: {linear_blend(
			image1: template(colors[0])
			x1: 0.28,  y1: 0.28
			x2: 0.29,  y2: 0.29
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.42,  y1: 0.42
			  x2: 0.43,  y2: 0.43
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1:  0.56,  y1: 0.56
			    x2: 0.57,  y2: 0.57
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 0.7,  y1: 0.7
			      x2: 0.71,  y2: 0.71
			      image2: template(colors[4])
		   ))))}
		6: {linear_blend(
			image1: template(colors[0])
			x1: 0.27,  y1: 0.27
			x2: 0.28,  y2: 0.28
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.38,  y1: 0.38
			  x2: 0.39,  y2: 0.39
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 0.49,  y1: 0.49
			    x2: 0.50,  y2: 0.50
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 0.60,  y1: 0.60
			      x2: 0.61,  y2: 0.61
			      image2: linear_blend(
			        image1: template(colors[4])
			        x1: 0.71,  y1: 0.71
			        x2: 0.72,  y2: 0.72
			        image2: template(colors[5])
		   )))))}
		7: {linear_blend(
			image1: template(colors[0])
			x1: 0.27,  y1: 0.27
			x2: 0.28,  y2: 0.28
			image2: linear_blend(
			  image1: template(colors[1])
			  x1: 0.36,  y1: 0.36
			  x2: 0.37,  y2: 0.37
			  image2: linear_blend(
			    image1: template(colors[2])
			    x1: 0.45,  y1: 0.45
			    x2: 0.46,  y2: 0.46
			    image2: linear_blend(
			      image1: template(colors[3])
			      x1: 0.54,  y1: 0.54
			      x2: 0.55,  y2: 0.55
			      image2: linear_blend(
			        image1: template(colors[4])
			        x1: 0.63,  y1: 0.63
			        x2: 0.64,  y2: 0.64
			        image2: linear_blend(
			          image1: template(colors[5])
			          x1: 0.72,  y1: 0.72
			          x2: 0.73,  y2: 0.73
			          image2: template(colors[6])
		   ))))))}
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	identity_hybrid := [
		radial: identity_horizontal_hybrid
		vertical: identity_horizontal_hybrid
		horizontal: identity_horizontal_hybrid
		overlay: identity_horizontal_hybrid
		diagonal: identity_horizontal_hybrid
	]
	
	########################################################################
	# Promo Stamp
	########################################################################
	# These are easier
	
	horizontal_stamp_hybrid := [
		1: { template(colors[0]) }
		2: { linear_blend(
			image1: template(colors[0])
			image2: template(colors[1])
			x1: -0.3,  y1: 0
			x2: 1.3,  y2: 0
		   )}
		3: { template(colors[1]) }
		4: { linear_blend(
			image1: template(colors[1])
			image2: template(colors[2])
			x1: -0.3,  y1: 0
			x2: 1.3,  y2: 0
		   )}
		5: {linear_blend(
			image1: template(colors[1])
			x1: -0.55,  y1: 0
			x2: 0.2,   y2: 0
			image2: linear_blend(
			  image1: template(colors[2])
			  x1: 0.8,   y1: 0
			  x2: 1.55,  y2: 0
			  image2: template(colors[3])
		   ))}
		6: { linear_blend(
			image1: template(colors[2])
			image2: template(colors[3])
			x1: 0.1,  y1: 0
			x2: 0.9,  y2: 0
		   )}
		7: {linear_blend(
			image1: template(colors[2])
			x1: -0.55,  y1: 0
			x2: 0.2,   y2: 0
			image2: linear_blend(
			  image1: template(colors[3])
			  x1: 0.8,   y1: 0
			  x2: 1.55,  y2: 0
			  image2: template(colors[4])
		   ))}
		8: { template("m") }
		9: { template("m") }
		10: { template("m") }
		11: { template("m") }
		12: { template("m") }
	]
	
	stamp_hybrid := [
		radial: [
			0: { template("c")       }
			1: { template(colors[0]) }
			2: { linear_blend(
				image1: template(colors[0])
				image2: template(colors[1])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			3: { template(colors[2]) }
			4: { linear_blend(
				image1: template(colors[3])
				image2: template(colors[2])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			5: { template(colors[3]) }
			6: { linear_blend(
				image1: template(colors[4])
				image2: template(colors[3])
				x1: -0.3,  y1: 0
				x2: 1.3,  y2: 0
			   )}
			7: { template(colors[4]) }
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		horizontal: horizontal_stamp_hybrid
		vertical: [
			1: { template(colors[0]) }
			2: { template(colors[1]) }
			3: { template(colors[2]) }
			4: { template(colors[3]) }
			5: { template(colors[4]) }
			6: { template(colors[5]) }
			7: { template(colors[6]) }
			8: { template("m") }
			9: { template("m") }
			10: { template("m") }
			11: { template("m") }
			12: { template("m") }
		]
		overlay: overlay_hybrid
	]
	
	########################################################################
	# Putting it all together.
	########################################################################
	# Determine the card background based on the card_color multiple choice options
	color_background := {
	
		# for thumbnails
		if input == "hybrid" then
			input := "white,blue,red,{hybrid_previews},horizontal"
		else if input == "overlay" then
			input := "blue,red,{hybrid_previews},overlay"
		else if input == "radial" or input == "horizontal" or input == "vertical" then
			input := "white,blue,red,{hybrid_previews}," + input
		else if input == "diagonal" then
			input := "white,black,{hybrid_previews},diagonal"
		else if input == "reversed" then
			input := "white,blue,red,{hybrid_previews},horizontal,reversed"
		
		# What type of 'hybrid'?
		land     := chosen(choice:"land")
		multi    := chosen(choice:"multicolor")
		spectral := chosen(choice:"spectral")
		hybrid   := chosen(choice:"hybrid")
		artifact := chosen(choice:"artifact")
		snow := chosen(choice:"snow")
		if land and colored_lands then template := land_template # use land template instead?
		
		# The selected colors
		colors := sort_text( order: "(wubrg)(lpoek)"
		                   , (if chosen(choice:"white") then "w")
		                   + (if chosen(choice:"blue")  then "u")
		                   + (if chosen(choice:"black") then "b")
		                   + (if chosen(choice:"red")   then "r")
		                   + (if chosen(choice:"green") then "g")
		                   + (if chosen(choice:"silver") then "i")
		                   + (if chosen(choice:"purple") then "p")
						   + (if chosen(choice:"yellow") then "l")
						   + (if chosen(choice:"orange") then "o")
						   + (if chosen(choice:"brown") then "e")
		                   + (if chosen(choice:"pink") then "k"))
		if multi and (hybrid or colors == "") then (
			colors := colors + "m"
			multi := false
		)
		if spectral and (hybrid or colors == "") then (
			colors := colors + "t"
			multi := false
		)
		if artifact and (hybrid or colors == "") then (
			colors := colors + "a"
			artifact := false
		)
		if snow and (hybrid or colors == "") then (
			colors := colors + "s"
			snow := false
		)
		if chosen(choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		if colors == "" then colors == "c"
		
		# 'shape' / type of hybrid
		shape := if      chosen(choice:"horizontal") then "horizontal"
		         else if chosen(choice:"vertical")   then "vertical"
		         else if chosen(choice:"overlay")    then "overlay"
		         else if chosen(choice:"diagonal")   then "diagonal"
		         else                                     "radial"
		
		# Determine background (allows styles to hook something else here)
		color_combination()
	}
	
	color_combination := {
		# The base hybrid, without the outer frame blended over it
		base := base_hybrid[shape][color_count]()
		
		# Put a frame around it?
		# Frame Color Overrides
		if styling.outer_color != "default" or styling.trim_color != "default" or styling.inner_color != "default" then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: (if styling.outer_color == "default" then base
					else template(
						if styling.outer_color == "white" then "w"
						else if styling.outer_color == "blue" then "u"
						else if styling.outer_color == "black" then "b"
						else if styling.outer_color == "red" then "r"
						else if styling.outer_color == "green" then "g"
						else if styling.outer_color == "silver" then "i"
						else if styling.outer_color == "purple" then "p"
						else if styling.outer_color == "pink" then "k"
						else if styling.outer_color == "yellow" then "l"
						else if styling.outer_color == "orange" then "o"
						else if styling.outer_color == "brown" then "e"
						else if styling.outer_color == "multicolor" then "m"
						else if styling.outer_color == "spectral" then "t"
						else if styling.outer_color == "artifact" then "a"
						else if styling.outer_color == "snow" then "s"
						else "c"
					)
				)
				light: masked_blend(
					mask: "multicolor_blend_{type}.png",
					dark: (if styling.inner_color == "default" then base
						else template(
							if styling.inner_color == "white" then "w"
							else if styling.inner_color == "blue" then "u"
							else if styling.inner_color == "black" then "b"
							else if styling.inner_color == "red" then "r"
							else if styling.inner_color == "green" then "g"
							else if styling.inner_color == "silver" then "i"
							else if styling.inner_color == "purple" then "p"
							else if styling.inner_color == "orange" then "o"
							else if styling.inner_color == "yellow" then "l"
							else if styling.inner_color == "brown" then "e"
							else if styling.inner_color == "pink" then "k"
							else if styling.inner_color == "multicolor" then "m"
							else if styling.inner_color == "spectral" then "t"
							else if styling.inner_color == "artifact" then "a"
							else if styling.inner_color == "snow" then "s"
							else "c"
						)
					)
					light: (if styling.trim_color == "default" then base
						else template(
							if styling.trim_color == "white" then "w"
							else if styling.trim_color == "blue" then "u"
							else if styling.trim_color == "black" then "b"
							else if styling.trim_color == "red" then "r"
							else if styling.trim_color == "green" then "g"
							else if styling.trim_color == "silver" then "i"
							else if styling.trim_color == "purple" then "p"
							else if styling.trim_color == "orange" then "o"
							else if styling.trim_color == "brown" then "e"
							else if styling.trim_color == "yellow" then "l"
							else if styling.trim_color == "pink" then "k"
							else if styling.trim_color == "multicolor" then "m"
							else if styling.trim_color == "spectral" then "t"
							else if styling.trim_color == "artifact" then "a"
							else if styling.trim_color == "snow" then "s"
							else "c"
						)
					)
				)
			)
		# Lesurgo's "Land-brid" Effect
		else if contains(styling.extras, match:"spell-land hybrid") and color_count == 1 then
			linear_blend(
				image1: base,
				image2: land_template(colors[0]),
				x1: 0.4,  y1: 0
				x2: 0.6,  y2: 0
			)
		# Circeus' Hybrid Effect
		else if contains(styling.extras, match:"colorless-colored hybrid") and not artifact and not multi and color_count == 1 then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: base
				light: linear_blend(
					image1: template("c"),
					image2: base,
					x1: 0.4, y1: 0
					x2: 0.6, y2: 0
				)
			)
		else if contains(styling.extras, match:"colorless-colored hybrid") and not artifact and (multi or color_count > 1) then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("m")
				light: linear_blend(
					image1: template("c"),
					image2: template("m"),
					x1: 0.4, y1: 0
					x2: 0.6, y2: 0
				)
			)
		# Circeus' Tinged Artifact Hybrid Effect
		else if contains(styling.extras, match:"tinged artifact hybrid") and artifact and not multi and color_count == 1 then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a")
				light: linear_blend(
					image1: template("a"),
					image2: template(colors[0]),
					x1: 0.4, y1: 0
					x2: 0.6, y2: 0
				)
			)
		else if contains(styling.extras, match:"tinged artifact hybrid") and artifact and (multi or color_count > 1) then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a")
				light: linear_blend(
					image1: template("a"),
					image2: template("m"),
					x1: 0.4, y1: 0
					x2: 0.6, y2: 0
				)
			)
		# Alpha Style Dual Lands
		else if type == "card" and land and color_count == 2 and shape != "overlay" and contains(styling.extras, match:"alpha style dual lands") then
			masked_blend(
				mask:  "masks/alpha_blend.png",
				dark:  land_template(colors[0]),
				light: land_template(colors[1]),
			)
		# Murmuring Bosk Effect
		else if land and multi and mask_multi_land_with_color() then
			masked_blend(
				mask:  "hybrid_blend_{type}.png",
				dark:  base,
				light:  land_template("m"),
			)
		# Multicolored Snow Artifact Frame
		else if artifact and snow and multi then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("m"),
					light: template("s"),
				)
			)
		# Spectral Snow Artifact Frame
		else if artifact and snow and spectral then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("t"),
					light: template("s"),
				)
			)
		# Multicolored Artifact Frame
		else if artifact and multi then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("m"),
					light: base,
				)
			)
		# Spectral Artifact Frame
		else if artifact and spectral then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("t"),
					light: base,
				)
			)
		# Snow Artifact Frame
		else if artifact and snow then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("s"),
					light: base,
				)
			)
		# Multicolored Snow Frame
		else if snow and multi then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("s"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("m"),
					light: base,
				)
			)
		# Spectral Snow Frame
		else if snow and spectral then
			masked_blend(
				mask: "artifact_blend_{type}.png",
				dark: template("s"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png"
					dark: template("t"),
					light: base,
				)
			)
		# Multicolored Frame
		else if multi then 
			masked_blend(
				mask:  "multicolor_blend_{type}.png",
				dark:  template("m"),
				light: base,
			)
		# Spectral Frame
		else if spectral then 
			masked_blend(
				mask:  "multicolor_blend_{type}.png",
				dark:  template("t"),
				light: base,
			)
		# Hybrid Colored Artifact Frame
		else if artifact and color_count > 1 and mask_hybrid_with_land() then 
			masked_blend(
				mask:  "artifact_blend_{type}.png",
				dark:  template("a"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png",
					dark: template("c"),
					light: base
				)
			)
		# Hybrid Colored Snow Frame
		else if snow and color_count > 1 and mask_hybrid_with_land() then 
			masked_blend(
				mask:  "artifact_blend_{type}.png",
				dark:  template("s"),
				light: masked_blend(
					mask: "multicolor_blend_{type}.png",
					dark: template("c"),
					light: base
				)
			)
		# Artifact Frame
		else if artifact then 
			masked_blend(
				mask:  "artifact_blend_{type}.png",
				dark:  template("a"),
				light: base,
			)
		# Snow Frame
		else if snow then 
			masked_blend(
				mask:  "artifact_blend_{type}.png",
				dark:  template("s"),
				light: base,
			)
		# Hybrid Frames
		else if color_count > 1 and mask_hybrid_with_land() then
			masked_blend(
				mask:  "hybrid_blend_{type}.png",
				dark:  land_template("c"),
				light: base,
			)
		else base
	}
	
	########################################################################
	# Specific types
	########################################################################
	
	########################################################################
	# Font colors
	########################################################################
	