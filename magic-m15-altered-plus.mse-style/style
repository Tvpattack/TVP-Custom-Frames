mse version: 2.0.0
game: magic
short name: M15 Mainframe-Plus
full name: M15 w/Extraframes
icon: card-sample.png
installer group: magic/m15 style/normal cards
position hint: 001
version: 2020-09-04
depends on:
	package: magic.mse-game
	version: 2020-04-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2018-01-01
depends on:
	package: magic-pride.mse-include
	version: 2021-05-26
depends on:
	package: magic-mana-large-dark.mse-symbol-font
	version: 2015-12-13
depends on:
	package: magic-blends.mse-include
	version: 2015-05-23

card width: 375
card height: 523
card dpi: 22150
##### Flavor bar image by SirnightNano
##### Ancestral generic mana by ancestral
##### Nyx crowns by Angelus
##### Companion crowns, nyx extensions, DOM FNM frame, THB fullart lands, snow frames by silverback_ape
##### Updated PUMA by Cardists
##### Inverted by VerumCH
##### star, Space, path, and Familiars by Tvpattack
##### Smallbox by Fungustober and CyberChronometer
##### lush by OwlUmbreon, Implemented by Tvpattack
##### norm by Fungustober, implemented by Tvpattack
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	include file: /magic-pride.mse-include/scripts
	# Load scripts that are redefined from the blends package
	include file: blends/new-blends
	# Load scripts that are redefined from the game file
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.hybrid_name == "grey" }
	mask_hybrid_with_gold := { styling.hybrid_name == "gold" }

	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	base_template_prefix := [card: "Normal/", alias: "alias/", alias2: "alias2/", snow:"snow/", snowtexture:"snow/", devoid: "devoid/", devoid2:"devoid2/", nyx: "nyx/", star: "star/", space: "space/", path: "path/", norm: "norm/",  lush: "lush/", smallbox: "smallbox/", sky: "sky/", frontier: "frontier/", miracle: "miracles/", node:"nodes/", promo: "promo/", crown: "legend/" cons:"conspiracy/", curtain: "curtains/", fnm: "fnm/", fnmpt: "paradox/", inverted: "inverted/", invertedpt: "inverted/", map: "maps/", energy: "energies/", mappt: "maps/" pt: "Normal/", pt2: "Normal/", slide: "masks/", slide2: "masks/", slide3: "masks/", arrow: "arrows/", arrow2: "arrows/", arrow3: "arrows/", season: "season/", stamp: "Stamp/", identity: "/magic-identity-new.mse-include/", backdfc: "backdfc/", puma: "puma/", front: "flags/", back: "flags/", pins: "pins/", pop: "prototype/", cpop1: "prototype/", cpop2: "prototype/", cpop3: "prototype/", cpop4: "prototype/", cpop5: "prototype/", pro: "prototype/", adventure: "adventure/", adventure2: "adventure/", adventure3: "adventure/", adventure4: "adventure/", focus: "focus/", focus2: "focus/", paradox: "paradox/", paradoxpt: "paradox/"]
	shifted_template_prefix := [card: "shifted/", alias: "shifted/", snow:"snow/", snowtexture:"snow/", devoid:"devoid/", devoid2: "devoid2/", nyx: "nyx/", star: "star/", pins: "pins/", space: "space/", path: "path/", lush: "lush/", norm: "norm/", smallbox:"smallbox/", sky:"sky/", frontier: "frontier/", miracle: "shifted/",  node:"shifted/", promo: "promo/", crown: "shifted/", cons:"conspiracy/", curtain: "curtains/", fnm:"fnm/", fnmpt: "paradox/", inverted: "inverted/", invertedpt: "inverted/", map: "maps/", energy: "energies/", mappt: "maps/", pt: "shifted/", slide: "shifted/", slide2: "shifted/", slide3: "shifted/", arrow: "arrows/", arrow2: "arrows/", arrow3: "arrows/", season: "season/", stamp: "shifted/", identity: "/magic-identity-new.mse-include/", puma: "puma/shifted/", cpop1: "prototype/", cpop2: "prototype/", cpop3: "prototype/", cpop4: "prototype/", cpop5: "prototype/", pop: "prototype/", pro: "prototype/", paradox: "paradox/", paradoxpt: "paradox/"]
	template_prefix := { if type == "miracle" and pure_snow() then [miracle:"snow/"] else if is_shifted() then shifted_template_prefix else base_template_prefix }
	template_suffix := [card: "card.jpg",  node:"node.png", alias:"alias.png", alias2:"alias.png", devoid:"card.png", devoid2:"card.png", snow:"card.jpg", snowtexture:"snow.png", nyx: "nyx.png",  star: "star.png", space: "space.png", path: "path.png", norm: "norm.png", lush: "lush.png", smallbox: "smallbox.png", sky: "sky.png", frontier: "frontier.png",  miracle: "miracle.png", promo: "card.jpg", crown: "crown.png", cons:"cons.png", curtain: "card.png", fnm:"card.png", fnmpt: "pt.png", inverted: "card.png", invertedpt: "pt.png", map: "card.png", energy: "card.png", mappt: "pt.png", pt: "pt.png", pt2: "pt2.png", slide: "slide.png", slide2: "slide2.png", slide3: "slide3.png", stamp: "stamp.jpg", arrow: "arrow.png", arrow2: "arrow2.png", arrow3: "arrow3.png", season: "flag.png" front:"flag.png" back:"flag2.png" identity: "identity.png", backdfc: "back.png", puma: "puma.png", pins: "card.png", pop: "pop.png", cpop1: "cpop1.png", cpop2: "cpop2.png", cpop3: "cpop3.png", cpop4: "cpop4.png", cpop5: "cpop5.png", pro: "pro.png", adventure:"card.png", adventure2:"card2.png", adventure3:"card3.png", adventure4:"card4.png", focus:"focus.png", focus2:"focus2.png", paradox: "card.png", paradoxpt: "pt.png"]
	template      := { crown_lead(type) + template_prefix()[type] + input + crown_follow(type) + template_suffix[type] }
	land_template := { crown_lead(type) + template_prefix()[type] + (if input == "a" then "c" else input) + (if landless(type) then "" else "l") + crown_follow(type) + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"

	landless := {if input == "nyx" or input == "star" or input == "backdfc" or input == "space" or input == "path" or input == "lush" or input == "smallbox" or input == "sky" or input == "frontier" or input == "pins" or input == "node" or input == "miracle" or input == "alias" or input == "alias2" or input == "devoid" or input == "devoid2" or input == "energy" or input == "season" or input == "front" or input == "back" or input =="pop" or input == "cpop1" or input == "cpop2" or input == "cpop3" or input == "cpop4" or input == "cpop5" or input == "pro" or input == "adventure2" or input == "adventure4" or input == "focus" or input == "focus2" or input == "" or input == "cons" or input == "arrow" or input == "crown" or input == "nyxcrown" or input == "starcrown" or input == "spacecrown" then true else false}

	crown_lead := {
		if input != "crown" then ""
		else if (styling.legend_crown == "custom" and styling.custom_crown_location != "")
			then "/magic-mainframe-extras.mse-include/" + styling.custom_crown_location
		else ""
	}
	crown_follow := {
		if input != "crown" then ""
		else if styling.legend_crown == "nyx" or (is_nyx() and chosen(styling.other_options, choice:"auto nyx crowns"))
			then "nyx"
		else if styling.legend_crown == "star" or (is_star() and chosen(styling.other_options, choice:"auto star crowns"))
			then "star"
		else if styling.legend_crown == "space" or (is_space() and chosen(styling.other_options, choice:"auto space crowns"))
			then "space"
		else if styling.legend_crown == "companion"
			then "com"
		else ""
	}
	mv_split := break_text@(match: "(?ix) 1/2 | [|][WUBRGFCX] | [0-9](/[WUBRGCVLHSFCETQ2X]) | [0-9]+(?!/[WUBRGCVLHSFCETQ2X]) | [WUBRGCVLHSF0-9X](/[WUBRGCVLHSFX])\{0,4} ")
	number_of_symbols := { length(mv_split(card.casting_cost_2)) }

	prototype_cost := {
			if number_of_symbols() < 2 then color_background(type:"cpop1", 	base_hybrid:pt_hybrid) 
			else if number_of_symbols() == 2 then color_background(type:"cpop2", 	base_hybrid:pt_hybrid) 
			else if number_of_symbols() == 3 then color_background(type:"cpop3", 	base_hybrid:pt_hybrid) 
			else if number_of_symbols() == 4 then color_background(type:"cpop4", 	base_hybrid:pt_hybrid) 
			else color_background(type:"cpop5", 	base_hybrid:pt_hybrid)}

	transfer_levels := {if is_mutate() then false else true}
	node_background := { color_background(type:"node",     base_hybrid:card_hybrid) }
	nyx_background := { color_background(type:"nyx",     base_hybrid:card_hybrid) }
	sky_background := { color_background(type:"sky",	base_hybrid:card_hybrid)}
	frontier_background := { color_background(type:"frontier",	base_hybrid:card_hybrid)}
	star_background := { color_background(type:"star",     base_hybrid:card_hybrid) }
	space_background := { color_background(type:"space",     base_hybrid:card_hybrid) }
	path_background := { color_background(type:"path",     base_hybrid:card_hybrid) }
	norm_overlay := { color_background(type:"norm",     base_hybrid:card_hybrid) }
	backdfc_background := { color_background(type:"backdfc",     base_hybrid:card_hybrid) }
	lush_background := { color_background(type:"lush",     base_hybrid:card_hybrid) }
	devoid_background := { color_background(type:"devoid",     base_hybrid:card_hybrid) }
	devoid2_background := { color_background(type:"devoid2",     base_hybrid:card_hybrid) }
	paradox_background := { color_background(type:"paradox",     base_hybrid:card_hybrid) }
	paradox_ptbox := { color_background(type:"paradoxpt",     base_hybrid:card_hybrid) }
	snow_background := { color_background(type:"snow",     base_hybrid:card_hybrid) }
	snow_texture := { color_background(type:"snowtexture",     base_hybrid:card_hybrid) }
	puma_bar := { color_background(type:"puma", base_hybrid:card_hybrid) }
	fnm_background := { color_background(type:"fnm",     base_hybrid:card_hybrid) }
	inverted_background := { color_background(type:"inverted",     base_hybrid:card_hybrid) }
	alias_bar := { color_background(type:"alias",     base_hybrid:card_hybrid) }
	alias2_bar := { color_background(type:"alias2",     base_hybrid:card_hybrid) }
	miracle_background := { color_background(type:"miracle",     base_hybrid:card_hybrid) }
	map_background := { color_background(type:"map",     base_hybrid:card_hybrid) }
	energy_background := { color_background(type:"energy",     base_hybrid:card_hybrid) }
	promo_background := { color_background(type:"promo",     base_hybrid:card_hybrid) }
	fnm_ptbox := { color_background(type:"fnmpt",     base_hybrid:pt_hybrid) }
	inverted_ptbox := { color_background(type:"invertedpt",     base_hybrid:pt_hybrid) }
	pt2 := { color_background(type:"pt2",     base_hybrid:pt_hybrid) }
	mappt_background := { color_background(type:"mappt",     base_hybrid:pt_hybrid) }
	arrow_background := { color_background(type:"arrow",     base_hybrid:pt_hybrid) }
	arrow_background_2 := { color_background(type:"arrow2",     base_hybrid:pt_hybrid) }
	arrow_background_3 := { color_background(type:"arrow3",     base_hybrid:pt_hybrid) }
	crown_background := { color_background(type:"crown", base_hybrid: card_hybrid)}
	curtain_background := { color_background(type:"curtain", base_hybrid: card_hybrid)}
	cons_background := { color_background(type:"cons", base_hybrid: card_hybrid)}
	background_slide := { color_background(type:"slide", base_hybrid: card_hybrid)}
	background_slide_2 := { color_background(type:"slide2", base_hybrid: card_hybrid)}
	background_slide_3 := { color_background(type:"slide3", base_hybrid: card_hybrid)}
	season_background := { color_background(type:"season",     base_hybrid:card_hybrid) }
	smallbox_colors := { color_background(type:"smallbox", 	base_hybrid:card_hybrid) }
	adventure_colors := { color_background(type:"adventure", 	base_hybrid:card_hybrid) }
	adventure2_colors := { color_background(type:"adventure2", 	base_hybrid:card_hybrid) }
	adventure3_colors := { color_background(type:"adventure3", 	base_hybrid:card_hybrid) }
	adventure4_colors := { color_background(type:"adventure4", 	base_hybrid:card_hybrid) }
	focus_colors := { color_background(type:"focus", 	base_hybrid:card_hybrid) }
	focus2_colors := { color_background(type:"focus2", 	base_hybrid:card_hybrid) }
	prototype_pt := { color_background(type:"pop", 	base_hybrid:card_hybrid) }
	prototype_colors := { color_background(type:"pro", 	base_hybrid:card_hybrid) }
	front_flag_image := { color_background(type:"front", base_hybrid:card_hybrid) }
	back_flag_image := { color_background(type:"back", base_hybrid:card_hybrid) }
	pins_image := { color_background(type:"pins", base_hybrid:card_hybrid) }
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	loyalty_image := {
		if      contains(input, match: "+") then "loyaltyup.png"
		else if contains(input, match: "-") then "loyaltydown.png"
		else                                     "loyaltynaught.png"
	}

	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	# Is the card a promo card?
	is_promo := { styling.promo }
	is_stamped := {styling.use_holofoil_stamps and (card.rarity ==  "rare" or card.rarity == "mythic rare")}
	has_identity := { styling.color_indicator_dot }
	has_identity2 := { styling.color_indicator_dot_2 }
	shrink_name := {if styling.shrink_name_text != "" then to_int(styling.shrink_name_text) else 0 }
	is_unsorted := {styling.remove_from_autocount}
	is_devoid := { chosen(styling.frames, choice: "devoid") and not is_map()}
	is_devoid2 := { contains(card.notes, match:"!devoid2")}
	is_rem := { contains(card.notes, match:"!framed")}
	is_clear := { (chosen(styling.frames, choice: "clear") or is_devoid() or is_devoid2()) and not is_map()}
	is_puma := { chosen(styling.frames, choice: "puma") and not is_map() and not is_clear() and not contains(styling.frames, match:"less art") and not is_full_art() }
	is_mutate := { not is_full_art() and chosen(styling.frames, choice: "mutate") and not is_map()}
	is_miracle := { chosen(styling.frames, choice: "miracle") and not is_map() and not is_expanded_art() and not is_cons() and not is_fnm() and not is_inverted()}
	is_adventure := {chosen(styling.frames, choice: "adventure") and chosen(styling.adventure_type, choice: "normal")}
	is_adventure2 := {chosen(styling.frames, choice: "adventure") and chosen(styling.adventure_type, choice: "reversed")}
	is_focus := {chosen(styling.frames, choice: "adventure") and chosen(styling.adventure_type, choice: "focus")}
	is_focus2 := {chosen(styling.frames, choice: "adventure") and chosen(styling.adventure_type, choice: "reversed focus")}
	is_nyx := { chosen(styling.frames, choice: "nyx") and not is_map() }
	is_sky := { chosen(styling.altered_plus_frames, choice: "sky") and not is_map() }
	is_frontier := { chosen(styling.altered_plus_frames, choice: "frontier") and not is_map() }
	is_frontier := { chosen(styling.altered_plus_frames, choice: "frontier") and not is_map() }
	is_paradox := { chosen(styling.frames, choice: "paradox") and not is_map() }
	is_star := { chosen(styling.altered_plus_frames, choice: "star") and not is_map() }
	is_space := { chosen(styling.altered_plus_frames, choice: "space") and not is_map() }
	is_path := { chosen(styling.altered_plus_frames, choice: "path") and not is_map() }
	is_norm := { chosen(styling.altered_plus_frames, choice: "norm") and not is_map() }
	is_backdfc := { chosen(styling.altered_plus_frames, choice: "backdfc") and not is_map() }
	is_lush := { chosen(styling.altered_plus_frames, choice: "lush") and not is_map() }
	is_prototype := { chosen(styling.frames, choice: "prototype") and not is_map() }
	is_vehicle := { (chosen(styling.frames, choice: "vehicle") or (chosen(styling.other_options, choice:"auto vehicles") and match_vehicle(card.sub_type))) and not is_map()}
	is_vehicle := { (chosen(styling.frames, choice: "vehicle") or (chosen(styling.other_options, choice:"auto vehicles") and match_vehicle(card.sub_type))) and not is_map()}
	is_familiar := { (chosen(styling.altered_plus_frames, choice: "familiar") or (chosen(styling.other_options, choice:"auto familiars") and contains(card.sub_type, match:"Entity"))) and not is_map()}
	is_arcun := { (chosen(styling.altered_plus_frames, choice: "arcun overlay")) }
	is_snow := { (chosen(styling.frames, choice: "snow") or (chosen(styling.other_options, choice:"auto snow") and match_snow(card.super_type))) and not is_map()}
	is_cons := { chosen(styling.frames, choice: "draft matters") or chosen(styling.frames, choice: "conspiracy") and not is_map() }
	is_scrolls := { chosen(styling.frames, choice: "conspiracy") and not is_map()}
	is_shifted := { chosen(styling.frames, choice: "planeshifted") and not is_map() and not is_full_art() and not is_fnm()}
	is_fnm := {chosen(styling.frames, choice:"fnm promo") and not is_clear() and not is_full_art() and not is_map()}
	is_inverted := {chosen(styling.frames, choice:"inverted") and not is_clear() and not is_full_art() and not is_fnm() and not is_map()}
	is_map := { chosen(styling.frames, choice: "map") }
	use_node := { chosen(styling.frames, choice: "lesson") }
	is_season := { chosen(styling.frames, choice: "season") and not is_map() }
	is_legend := {not is_map() and (chosen(styling.frames, choice: "legend") or (set.auto_legends and contains(card.super_type, match:"Legendary"))) }
	is_full_art := {chosen(styling.frames, choice:"fullart") and not is_map() and not is_clear()}
	is_expanded_art := {not is_map() and not is_clear() and contains(styling.frames, match:"less art")}
	is_borderless := {not is_map() and not is_clear() and chosen(styling.frames, choice:"borderless art")}
	is_thbland := {chosen(styling.frames, choice:"frameless art") and not is_leveler() and remove_tags(card.text) == "\n"}
	expanded_mask := { "bigimagemasks/" + (if is_full_art() then "dka_" else "") + (if is_borderless() then (if is_stamped() then "rare_" else "") + "borderless_" else "") + "frameless.png"}
	is_curtains := {contains(card.notes, match:"!curtain")}
	is_pinned := {chosen(styling.other_options, choice:"pride pinlines")}
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	un_png := replace@(match:".png", replace: "")
	ancestral_mana := { chosen(styling.other_options, choice:"ancestral generic mana")}
	override_clear := replace@(match:"</color>(</b></code>)?", replace: "")+
		replace@(match:"(<code><b>)?<color:black>", replace: "")
	override_filter := replace@(match:"\\[([^\\]]+)]", replace: "<code><b><color:black>[\\1]</color></b></code>")
	is_d20 := {styling.d20_dividers != "off" and not is_leveler()}
	is_all_break := {contains(styling.d20_dividers, match:"all breaks")}
	d20string := "^(<b>)?(((</sym>)?[-0-9 ,+>\<](<sym>)?)+|[Ee]lse|[Oo]ther) ?(</b>)?[|]"
	d20_array := 
		filter_text@(match:"(\n|"+d20string+")")
		+split_text@(match:d20string)
	number_of_rolls := {min(6, if is_all_break() then 1+length(filter_text(card.rule_text, match:"\n"))-(rolls_start(card.text)-invert_rolls()) else length(d20_array(input))-1)}
	rolls_start := {
		if styling.d20_dividers == "all breaks +3" then 4
		else if styling.d20_dividers == "all breaks +2" then 3
		else if styling.d20_dividers == "all breaks +1" then 2
		else if styling.d20_dividers == "all breaks" then 0
		else if is_d20() then length(d20_array(input).0)
		else 0
	}
	d20_filter := replace@(match:"^([Ee]lse ?|[Oo]ther ?|((</sym>)?[-0-9 ,+>\<](<sym>)?)+)[|]", replace:"<b>\\1</b>|")
	top_of_para := {
		input := input + no_roll(card.text)
		input := max(input, 0)
		if card_style.text.layout.paragraphs[input].top or else -1 >= 0 then
			if invert_rolls() == 1 and input == rolls_start()-invert_rolls() then card_style.text.top
			else if input == 0 then card_style.text.top + card_style.text.layout.paragraphs[input].top
			else card_style.text.top + card_style.text.layout.paragraphs[input].top - 0.5*(card_style.text.layout.paragraphs[input].top-card_style.text.layout.paragraphs[input-1].bottom)
		else 0
	}
	height_of_para := {
		input := input + no_roll(card.text)
		if card_style.text.layout.paragraphs[input].bottom or else 0 > 0 then
			if invert_rolls() == 1 and input == rolls_start() then card_style.text.layout.paragraphs[input-1].bottom
			else card_style.text.layout.paragraphs[input].bottom + 1.3*(card_style.text.layout.paragraphs[input].top-card_style.text.layout.paragraphs[input-1].bottom) - card_style.text.layout.paragraphs[input].top
		else 0
	}
	no_roll := {if styling.d20_dividers == "all breaks" then 1 else if rolls_start(input) == 0 then 1 else 0}
	invert_rolls := {if chosen(styling.other_options, choice:"inverted d20") then 1 else 0}
	
	text_filter := text_filter + override_clear + d20_filter + {if chosen(styling.other_options, choice:"override-style text") then override_filter(input) else input}
	# This lets you break down how many mana symbols are in the cost of a card


	center_map := {is_map() and (card.casting_cost == "" or chosen(styling.other_options, choice:"always center map names"))}
	use_evobar := {chosen(styling.other_options, choice:"pokemon evobar")}
	use_sparkbar := {contains(card.notes, match:"!sparkbar")}
	is_token := { chosen(styling.altered_plus_frames, choice: "token")}
	is_altcast := {chosen(styling.frames, choice:"adventure") or contains(card.notes, match:"!alt")}
	is_reversed := {chosen(styling.frames, choice: "adventure") and (chosen(styling.adventure_type, choice: "reversed") or (chosen(styling.adventure_type, choice: "reversed focus")))}
	is_YGO := {chosen(styling.altered_plus_frames, choice:"Yugioh Frame")}
	is_YGO_gold := {contains(card.notes, match:"!ygogold")}
	use_gold := {contains(card.notes, match:"!gold")}
	is_familiarpt := {contains(card.notes, match:"!familiarpt")}
	use_bb := {contains(card.notes, match:"!bb")}
	use_sbb := {contains(card.notes, match:"!sbb")}
	use_ubb := {contains(card.notes, match:"!ubb")}
	use_comm := {contains(card.notes, match:"!comm")}
	bevel_black_name := {chosen(styling.name_color, choice:"bevel black")}
	bevel_black_type := {chosen(styling.typeline_color, choice:"bevel black")}
	bevel_black_text := {chosen(styling.text_color, choice:"bevel black")}
	use_box := {contains(card.notes, match:"!smallbox")}
	any_box := {contains(card.notes, match: "!anybox")}
	use_pins := {contains(card.notes, match:"!pins")}
	white_name := {chosen(styling.name_color, choice:"white")}
	white_name2 := {chosen(styling.name_color, choice:"shadowed white") or is_rem() or is_paradox()}
	black_name := {chosen(styling.name_color, choice:"black")}
	white_type := {chosen(styling.typeline_color, choice:"white")}
	white_type2 := {chosen(styling.typeline_color, choice:"shadowed white") or is_rem() or is_paradox()}
	black_type := {chosen(styling.typeline_color, choice:"black")}
	white_text := {chosen(styling.text_color, choice:"white")}
	white_text2 := {chosen(styling.text_color, choice:"shadowed white") or is_rem()}
	black_text := {chosen(styling.text_color, choice:"black")}
	center_name := {contains(card.notes, match:"!center")}
	use_jp := {contains(card.notes, match:"!JP")}
	alt_rarity := {styling.alt_rarity_color != ""}
	alt_rarity_color := {
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		
		output
	}
	alt_symbol := {symbol_variation(symbol:set.symbol, border_radius: alt_rarity_color().12, fill_type: "linear gradient", fill_color_1: rgb(alt_rarity_color().0, alt_rarity_color().1, alt_rarity_color().2), fill_color_2: rgb(alt_rarity_color().3, alt_rarity_color().4, alt_rarity_color().5), border_color_1: rgb(alt_rarity_color().6, alt_rarity_color().7, alt_rarity_color().8), border_color_2: rgb(alt_rarity_color().9, alt_rarity_color().10, alt_rarity_color().11), center_x:0.5, center_y:0.5, end_x:1, end_y:1)}
	is_skinned := {chosen(styling.other_options, choice:"godzilla style alias")}
	use_vorthos := {((not is_leveler() or lone_pt()) and card.pt != "") or chosen(styling.other_options, choice:"vorthos box")}
	clear_tops := {chosen(styling.other_options, choice:"clear tops") and not is_puma()}
	is_tarot := {chosen(styling.other_options, choice:"text watermarks")}
	pure_snow := {is_snow() and not is_fnm() and not is_inverted() and not is_paradox() and not is_full_art() and not is_leveler() and not is_shifted()}
	chop_top := {if styling.chop_top == "" then 0 else if comma_count(styling.chop_top) == "," or comma_count(styling.chop_top) == ",," then split_text(match:",", styling.chop_top).0 else styling.chop_top}
	chop_bot := {if comma_count(styling.chop_top) == ",," then split_text(match:",", styling.chop_top).1 else if styling.chop_bottom == "" then 0 else styling.chop_bottom}
	top_of_textbox := {(if is_map() then 340 else if is_full_art() then 359 else if is_mutate() and not is_prototype() then 395 else if is_prototype() and not is_mutate() then 385 else if is_prototype() and is_mutate() then 453.2 else 327) - (-chop_top()) }
	bottom_of_textbox := {(if is_map() then 475 else 481) - chop_bot() }

	is_leveler := {chosen(styling.frames, choice:"leveler")}
	box_leveler := {styling.level_containers == "pt boxes"}
	loy_leveler := {styling.level_containers == "loyalty boxes"}
	aug_leveler := {box_leveler() and center_label(input)}
	level_label := {if styling.level_label == "" then "level" else pull_comma_array(styling.level_label, end:false, cell:input, default:styling.level_label)}
	center_label := {loy_leveler() or level_label(input) == " "}
	lv_1_height := {lv_2_coordinate()}
	lv_2_coordinate := {max(min(52 + to_number(pull_comma_array(styling.level_offset, cell:0))+(if is_full_art() then 20 else if is_mutate() then 12 else nil),152), 0)}
	lv_3_coordinate := {max(min(101 + to_number(pull_comma_array(styling.level_offset, cell:1)+(if is_full_art() then 10 else if is_mutate() then 12 else nil)),152), lv_2_coordinate())}
	lv_4_coordinate := {max(min(152 + to_number(pull_comma_array(styling.level_offset, cell:2)+(if is_full_art() then 10 else if is_mutate() then 12 else nil)),152), lv_3_coordinate())}
	lv_2_height := {lv_3_coordinate() - lv_2_coordinate()}
	lv_3_height := {lv_4_coordinate()-lv_3_coordinate()}
	lv_4_height := {152-lv_4_coordinate()}
	l1_center := {327 + (if is_full_art() then 16 else 0) + 0.5*lv_1_height()}
	l2_center := {327 + lv_2_coordinate() + 0.5*lv_2_height()}
	l3_center := {327 + lv_3_coordinate() + 0.5*lv_3_height()}
	l4_center := {327 + lv_4_coordinate() + 0.5*lv_4_height()}
	is_readable := {contains(card.notes, match:"!readable")}
	overlay1 := {if is_d20() and not is_rem() then "d20slice.png" else if is_d20() or is_readable() and is_rem() then "d20slice2.png" else slice_crop(background_slide(), height: lv_2_height(), width:314, distance:(152-lv_2_coordinate()))}
	overlay2 := {if is_d20() and not is_rem() then "d20slice.png" else if is_d20() or is_readable() and is_rem() then "d20slice2.png" else slice_crop(background_slide_2(), height: lv_3_height(), width:314, distance:lv_3_height())}
	overlay3 := {if is_d20() and not is_rem() then "d20slice.png" else if is_d20() or is_readable() and is_rem() then "d20slice2.png" else slice_crop(background_slide_3(), height: lv_4_height(), width:314, distance:lv_4_height())}
	mask_height := {if input == "one" then lv_1_height() else if input == "two" then lv_2_height() else if input == "three" then lv_3_height() else if input == "four" then lv_4_height() else 0}
	lone_pt := {chosen(styling.other_options, choice:"regular pt on levelers") and not starting_loyalty()}
	starting_loyalty := {chosen(styling.other_options, choice:"use starting loyalty")}
	choose_ptbox := {if is_fnm() then fnm_ptbox() else if is_inverted() then inverted_ptbox() else if is_paradox() then paradox_ptbox() else card_ptbox()}
	lv_2_ptbox := { if is_vehicle() then "vpt.png" else if is_familiar() then "fmpt.png" else if is_clear() then "cpt.png" else if is_fnm() then fnm_ptbox() else if is_inverted() then inverted_ptbox() else if is_paradox() then paradox_ptbox() else leveler_ptbox2() }
	lv_3_ptbox := { if is_vehicle() then "vpt.png" else if is_familiar() then "fmpt.png" else if is_clear() then "cpt.png" else if is_fnm() then fnm_ptbox() else if is_inverted() then inverted_ptbox() else if is_paradox() then paradox_ptbox() else leveler_ptbox3() }
	lv_4_ptbox := { if is_vehicle() then "vpt.png" else if is_familiar() then "fmpt.png" else if is_clear() then "cpt.png" else if is_fnm() then fnm_ptbox() else if is_inverted() then inverted_ptbox() else if is_paradox() then paradox_ptbox() else color_background(type:"pt", base_hybrid:leveler_pt_hybrid3) }
	arrow_left := {if box_leveler() then -3 else if loy_leveler() then 10 else 18}
	arrow_width := {if box_leveler() then 84 else if loy_leveler() then 42 else 56}
	arrow_height := {if aug_leveler(input) then 42 else if box_leveler() then 50 else if loy_leveler() then 40 else 40}
	arrow_offset := {
		to_number(pull_comma_array(styling.arrow_or_bullet_offsets, cell:input, end: 0))
		+ (if box_leveler() then -5 else 0)
		+ (if aug_leveler(input) then 4 else 0)
	}
	custom_watermark_a := {if styling.card_watermark == "" or not contains(styling.card_watermark, match:".png") then "/magic-watermarks.mse-include/planeswalker.png" else "/magic-watermarks.mse-include/" + styling.card_watermark}
	special_text := {if is_leveler() then ((if card.level_0 != "" then "[" + level_label(0) + " " + card.level_0 + "] " else "") + card.level_1_text + (if card.pt != "" then " [" + card.pt + "]" else "") + "\n"
			+ (if card.level_1 != "" then "[" + level_label(1) + " " + card.level_1 + "] " else "") + card.level_2_text + (if card.pt_2 != "" then " [" + card.pt_2 + "]" else "") + "\n"
			+ (if card.level_2 != "" then "[" + level_label(2) + " " + card.level_2 + "] " else "") + card.level_3_text + (if card.pt_3 != "" then " [" + card.pt_3 + "]" else "") + (if card.level_4_text != "" then "\n" else "")
			+ (if card.level_3 != "" then "[" + level_label(3) + " " + card.level_3 + "] " else "") + card.level_4_text + (if card.pt_7 != "" then " [" + card.pt_7 + "]" else "")
		) else if is_mutate() then
			card.level_1_text + "\n" + card.rule_text
		else ""
	}
	shown_cr := {if set.automatic_copyright then set.copyright != "" else card.copyright != ""}
	card_shape := {if is_leveler() then "leveler" else if is_token() then "token" else if is_altcast() then "adventure" else "normal"}
	type_for_shrinking := {if use_box() and not any_box() then remove_tags(card.sub_type) else remove_tags(card.type)}
	shrink_type := {if styling.shrink_typeline_text != "" then to_int(styling.shrink_typeline_text) else if length(type_for_shrinking()) > 41 then 2 else if length(type_for_shrinking()) > 38 then 1 else 0 }
	shrink_type2 := {if styling.shrink_typeline_text != "" then to_int((if comma_count(styling.shrink_typeline_text) != "" then split_text(match:",", styling.shrink_typeline_text).1)) else 0 }
	shrink_name2 := {if styling.shrink_name_text != "" then to_int((if comma_count(styling.shrink_name_text) != "" then split_text(match:",", styling.shrink_name_text).1)) else 0 }
	# Determine a rarity code for M15 styles.
	rarity_code := {
		if not set.rarity_codes then ""
		else if is_promo() then "P"
		else if is_masterpiece() then "S"
		else if contains(card.shape, match:"token") and contains(card.notes, match:"!tokenrarity") then "T"
		else if contains(card.shape, match:"emblem") then "E"
		else if card.rarity == "common" then "C"
		else if card.rarity == "uncommon" then "U"
		else if card.rarity == "rare" then "R"
		else if card.rarity == "mythic rare" then "M"
		else if card.rarity == "special" then "S"
		else if card.rarity == "basic land" then "L" 
		else ""}

############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
set info style:
	symbol:
		variation:
			name: special
			border radius: 0.10
			fill type: solid
			fill color:   rgb(155,155,155)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: text
	name: chop top
	description: Shrinks the textbox X pixels from the top OR shrinks "top,bottom,"
styling field:
	type: text
	name: chop bottom
	description: Shrinks the textbox X pixels from the bottom.
styling field:
	type: text
	name: shrink name text
	description: Reduces the name text N points.
styling field:
	type: text
	name: shrink typeline text
	description: Reduces the typeline text N points.
styling field:
	type: multiple choice
	name: frames
	description: Use these frames. Higher level frames may override lower levels.
	choice: lesson
	choice: map
	choice: devoid
	choice: clear
	choice: borderless art
	choice: frameless art
	choice: fullart
	choice: puma
	choice: mutate
	choice: prototype
	choice: fnm promo
	choice: paradox
	choice: inverted
	choice: planeshifted
	choice: legend
	choice: adventure
	choice: conspiracy
	choice: draft matters
	choice: season
	choice: miracle
	choice: vehicle
	choice: nyx
	choice: leveler
	choice: snow
styling field:
	type: choice
	name: adventure type
	choice: normal
	choice: reversed
	choice: focus
	choice: reversed focus
styling field:
	type: choice
	name: Card Notes Frame options
	choice: <<Card Notes Frame options>>
	choice: Altered Plus has many frame options available in card notes! 
	choice: "!framed" - Nothing but the art and the borders of the card.
	choice: "!devoid2" - A frame option to have a more transparent devoid frame text box.
	choice: "!curtain" - Curtain frame option that puts a curtain on the top of the card.
	choice: Make sure to either reload MSE or update a frame for it to take effect.
	choice: "!gold" - Put a gold name and typeline plate on a card, with the frame being
	choice: gold as well!
	choice: "!noborder" - Turns off the gold border frame for gold frame.
	choice: This will leave you with just the name and typeline plate being gold.
	choice: "!familiarpt" - A way to enable the PT box of familiars without the frame.
	choice: "!smallbox" - An additional box for subtypes and types that are too long.
	choice: "!anybox" = Allows the smallbox to support any text, putting the subtypes
	choice: back on the typeline below.
	choice: "!pins" - Used as a fix for Mutate + frameless not having pinlines together.
	choice: "!center" - Centers the card name.
	choice: "!JP" - Changes the mana cost Font to the strixhaven JP symbol font. 
	choice: "!nopopout" - Disables the bevel for the YGO frame as well as disabling
	choice: The image popout that comes with it. Use this if you want to use the image
	choice: style of the Yugioh frame without the middle image and bevel.
	choice: "!tokenrarity" Will let you set the rarity to token, assuming youve chosen
	choice: the token option in the style. Why youd do this is beyond me.
styling field:
	type: multiple choice
	name: altered plus frames
	description: frames that are created for the altered plus frame
	choice: star
	choice: token
	choice: Yugioh Frame
	choice: space
	choice: sky
	choice: frontier
	choice: path
	choice: lush
	choice: familiar
	choice: norm
	choice: backdfc
	choice: front flag
	choice: back flag
	choice: arcun overlay
styling field:
	type: choice
	name: name color
	choice: default
	choice: black
	choice: bevel black
	choice: white
	choice: shadowed white
	description: The color of the name on the card.
styling field:
	type: choice
	name: typeline color
	choice: default
	choice: black
	choice: bevel black
	choice: white
	choice: shadowed white
	description: The color of the typeline on the card.
styling field:
	type: choice
	name: text color
	choice: default
	choice: black
	choice: bevel black
	choice: white
	choice: shadowed white
	description: The color of the text on the card.
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: text
	name: popout image style 2
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: text
	name: popout image style 3
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: text
	name: custom symbol
	description: Uses a custom Lesson symbol from data/magic-mainframe-extras.mse-include
styling field:
	type: choice
	name: legend crown
	choice: standard
	choice: nyx
	choice: space
	choice: companion
	choice: custom
	description: The type of legend crown to use for this card.
styling field:
	type: text
	name: custom crown location
	description: location of custom legend crown images in magic-mainframe-extras
styling field:
	type: multiple choice
	name: other options
	description: Other frame options
	choice: prerelease stamp
	choice: brown legendary vehicle pt
	choice: godzilla style alias
	choice: pokemon evobar
	choice: ancestral generic mana
	choice: override-style text
	choice: always center map names
	choice: use starting loyalty
	choice: regular pt on levelers
	choice: auto familiars
	choice: auto vehicles
	choice: auto snow
	choice: auto nyx crowns
	choice: auto star crowns
	choice: auto space crowns
	choice: text watermarks
	choice: clear tops
	choice: vorthos box
	choice: pride pinlines
	choice: inverted d20
	choice: edit card code
	initial: auto nyx crowns, auto familiars, auto vehicles, auto snow, auto star crowns, auto space crowns
styling field:
	type: text
	name: font cap
	description: Caps the font size of all text boxes to allow consistent sizes. Default is 14.
styling field:
	type: choice
	name: d20 dividers
	choice: d20 mode
	choice: off
	choice: all breaks
	choice: all breaks +1
	choice: all breaks +2
	choice: all breaks +3
	description: Do dice levels normally, off, on all linebreaks, on all but the first linebreak, etc.
styling field:
	type: text
	name: arrow or bullet offsets
	description: Formatted as 1,2,3,. Move the level arrow down X pixels. Use negative to move up.
styling field:
	type: text
	name: level offset
	description: Formatted as 1,2,3,. Move the level boxes down X pixels. Use negative to move up. For 4 equal levels, use -14,-25,-38,
styling field:
	type: text
	name: level label
	description: Change the level label. default is "LEVEL". Secondary lables can be added after a comma, "1,2,3,"
styling field:
	type: choice
	name: level containers
	choice: arrows
	choice: pt boxes
	choice: loyalty boxes
styling field:
	type: boolean
	name: use holofoil stamps
	description: Change to no to disable rare holofoil stamps
styling field:
	type: boolean
	name: color indicator dot
	description: Use the color indicator dot
	initial: no
styling field:
	type: boolean
	name: color indicator dot 2
	description: Use the color indicator dot for the adventure half
	initial: no
styling field:
	type: boolean
	name: remove from autocount
	description: Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial: no
styling field:
	type: text
	name: alt rarity color
	description: Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type: text
	name: card watermark
	description: Filename in magic-watermarks to use for standalone card watermark
styling field:
	type: choice
	name: hybrid name
	choice: grey
	choice: gold
	choice: hybrid
	description: Use a grey background for the name and type line on hybrid cards like real cards, or gold or hybrid instead.
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: package choice
	name: level mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-large.mse-symbol-font
styling field:
	type: choice
	name: center text
	description: When to center text (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: promo
	description: Is this card a promo card, with the "P" rarity?
	initial: no
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	frames:
		render style: checklist
		direction: vertical
	altered plus frames:
		render style: checklist
		direction: vertical
	other options:
		render style: checklist
		direction: vertical
############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left: 0
		top : 0
		width:	{if is_borderless() then 0 else 375}
		height:	523
		radius: 18
		left width:   17
		right width:  17
		top width:    17
		bottom width: 18
		z index: 14
		mask: { "imagemasks/" + (if is_puma() then "puma_" else "") + (if is_legend() then "crown_border" else "border_mask") + (if card.border_color == rgb(200,200,200) then "_silver" else "") + ".png" }
	card color:
		left:	0
		top:	0
		width:	375
		height:	523
		z index: 10
		render style: image
		popup style: in place
		image: { if is_clear() or clear_tops() then "" else if is_fnm() then fnm_background() else if is_inverted() then inverted_background() else if is_paradox() then paradox_background() else if is_full_art() then promo_background() else if pure_snow() then snow_background() else if is_adventure() then adventure_colors() else if is_adventure2() then adventure2_colors() else card_background() }
	############################# Name line
	name:
		left: { if center_map() then 55 else if is_map() then (if use_node() then 65 else 60) else if use_node() then 58 else if card.card_symbol=="none" then 32 else 50 }
		top: { if is_map() then 27 else if is_devoid() or is_devoid2() then 30 else if is_clear() or clear_tops() then 31 else 30 }
		right:  {if center_map() then 320 else (if is_map() then 320 else 341) - card_style.casting_cost.content_width }
		height: {23 - (0.5 * shrink_name()) }
		alignment: {if center_map() or center_name() then "center bottom shrink-overflow" else "left bottom shrink-overflow" }
		padding bottom: 0
		padding top: 0
		z index: 13
		font:
			name: { if is_map() then "Beleren Small Caps" else "Beleren Bold" }
			size: { (if is_map() then 14.8 else 16) - shrink_name() }
			color: {if white_name2() or is_fnm() then "white" else if black_name() or bevel_black_name() and not is_shifted() then "black" else if white_name() or is_shifted() and not is_fnm() or is_inverted() or black_name() then "white" else "black"}
			shadow color: {if is_shifted() and not is_fnm() then rgb(0,0,0) else if white_name2() then rgb(0,0,0) else if bevel_black_name() then "white" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 3
	name 2:
		left: { if is_adventure2() then 197 else if is_focus2() then 192 else if is_adventure() then 32 else if is_focus() then 31 else 0}
		top: {if is_adventure2() or is_adventure() then 328 else 333}
		right: {if is_adventure2() then (28 - card_style.casting_cost_2.content_width) else if is_adventure() then (178 - card_style.casting_cost_2.content_width) else if is_focus2() then (88 - card_style.casting_cost_2.content_width) else if is_focus() then (177 - card_style.casting_cost_2.content_width)  else 0}
		height: { 20 - shrink_name2() }
		alignment: bottom shrink-overflow
		z index: 15
		font:
			name: Beleren Bold
			size: {12 - shrink_name2() }
			color: white
	alias:
		left: {if is_skinned() then 45 else if is_map() then 15 else 33}
		top: {if is_map() then 58 else 53}
		width: {if is_skinned() then 285 else if use_evobar() then max(100, card_style.alias.content_width) else 0}
		height: 20
		alignment: { (if is_skinned() then "center" else "") + "bottom shrink-overflow"}
		padding bottom: 0
		z index: 13
		font:
			name: {if use_evobar() then "Matrix" else "MPlantin-Italic"}
			size: {if use_evobar() then 10 else 9}
			style: {if use_evobar() then "italic" else "bold"}
			weight: {if use_evobar() then "italic" else "bold"}
			color: {if use_evobar() then "black" else "white"}
#	alias 2:
#		left: {if is_clear() then 35 else 33}
#		top: {if is_clear() then 265 else 268}
#		width: {if is_skinned() then 285 else if use_sparkbar() then max(100, card_style.alias_2.content_width) else 0}
#		height: 20
#		alignment: { (if is_skinned() then "center" else "") + "bottom shrink-overflow"}
#		padding bottom: 0
#		z index: 13
#		font:
#			name: {if use_sparkbar() then "Matrix" else "MPlantin-Italic"}
#			size: {if use_sparkbar() then 10 else 9}
#			style: {if use_sparkbar() then "italic" else "bold"}
#			weight: {if use_sparkbar() then "italic" else "bold"}
#			color: {if use_sparkbar() then "black" else "white"}
	casting cost:
		right: { if is_map() then 327 else 346}
		top: { if is_map() then 27 else 29}
		width: {max(30, card_style.casting_cost.content_width) + 5}
		height: 23
		alignment: "middle right"
		font:
			name: MPlantin
			size: { if is_map() then 14 else 15}
		symbol font:
			name: {if use_jp() then "magic-mana-small-strixhaven-jp" else "magic-mana-large"}
			size: { if is_map() then 14 else 15}
			alignment: "middle right"
		always symbol: true
		z index: 13
		padding top: 0
	casting cost 2:
		right: {if is_adventure2() then 345 else if is_adventure() then 180 else if is_focus2() then 341 else if is_focus() then 183 else if is_prototype() then 342 else 0}
		top: {if is_adventure2() or is_adventure() then 328 else if is_prototype() and not is_mutate() then 330.5 else if is_mutate() and is_prototype() then 397.7 else 333.5}
		width: { if is_altcast() then (max(30, card_style.casting_cost_2.content_width) + 5) else if is_prototype() then (max(45, card_style.casting_cost_2.content_width) + 5) else 0}
		height: 20
		alignment: middle right
		symbol font:
			name: magic-mana-large
			size: 12
			alignment: middle center
		always symbol: true
		z index: 16
		padding top: 0
	card symbol:
		left: {if card.card_symbol=="none" then 20 else 30}
		top: {if card.card_symbol == "EX" then 27 else if card.card_symbol =="alchemy" then 30 else 29}
		height: {if card.card_symbol == "EX" then 25 else 20}
		width: {if card.card_symbol == "EX" then 21 else if card.card_symbol =="alchemy" then 20 else 14}
		z index: 12
		render style: image
		choice images:
			tombstone: tombstone.png
			alchemy: alchemy.png
			EX: ex.png
	############################# Image
	image:
		left: {if is_clear() or is_map() or is_expanded_art() or is_puma() or is_rem() then 0 else if is_YGO() and is_mutate() then 14 else if is_full_art() then 23 else if clear_tops() then 15 else if is_mutate() and not is_YGO() then 22 else if is_YGO() and not is_mutate() then 14 else 29}
		top: {if is_map() then 57 else if is_clear() or is_expanded_art() or clear_tops() or is_rem() then 0 else if is_YGO() then 58 else 59}
		width: {if is_clear() or is_map() or is_expanded_art() or is_puma() or is_rem() then 375 else if is_full_art() then 328 else if clear_tops() then 345 else if is_YGO() and is_mutate() then 347 else if is_mutate() and not is_YGO() then 330 else if is_YGO() then 347 else 316}
		height:	{if is_clear() or is_expanded_art() or is_rem() then 523 else if is_map() then 241 else if is_YGO() and is_mutate() then 334 else if is_puma() then 265 else if is_full_art() then 423 else if clear_tops() then 291 else if is_mutate() then 334 else if is_YGO() then 233 else 231}
		z index: 11
		default: {default_image(card.card_color)}
		mask: { if is_devoid() or is_devoid2() then "imagemasks/image_mask_devoid.png" else if is_rem() then "rem_mask.png" else if is_YGO() and is_expanded_art() and not contains(card.notes, match:"!nopopout")  then expanded_mask() else if is_YGO() and not is_mutate() and not is_full_art() and not is_expanded_art() then "imagemasks/YGO.png" else if is_YGO() and is_mutate() then "imagemasks/YGOmutatemask.png" else if is_clear() then "image_mask.png" else if is_thbland() then "cornermask.png" else if is_puma() then "imagemasks/puma_mask" + (if is_mutate() then "_mutate.png" else "3.png") else if is_expanded_art() then expanded_mask() else if (is_full_art() or is_full_art() and is_YGO()) then "imagemasks/image_mask" + (if is_rare() and styling.use_holofoil_stamps then "_rare") + ".png" else if is_mutate() and not clear_tops() then "imagemasks/mutate_mask.png" else ""}
	mainframe image:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 13
	mainframe image 2:
		left: {if comma_count(styling.popout_image_style_2) == ",,,," then split_text(match:",", styling.popout_image_style_2).0 else "0"}
		top: {if comma_count(styling.popout_image_style_2) == ",,,," then split_text(match:",", styling.popout_image_style_2).1 else "0"}
		width: {if comma_count(styling.popout_image_style_2) == ",,,," then split_text(match:",", styling.popout_image_style_2).2 else "0"}
		height: {if comma_count(styling.popout_image_style_2) == ",,,," then split_text(match:",", styling.popout_image_style_2).3 else "0"}
		z index: 14
	image 2:
		left: {if comma_count(styling.popout_image_style_3) == ",,,," then split_text(match:",", styling.popout_image_style_3).0 else if is_YGO() and not contains(card.notes, match:"!nopopout") then 89.7 else "0"}
		top: {if comma_count(styling.popout_image_style_3) == ",,,," then split_text(match:",", styling.popout_image_style_3).1 else if is_YGO() and not contains(card.notes, match:"!nopopout") then 77.3 else "0"}
		width: {if comma_count(styling.popout_image_style_3) == ",,,," then split_text(match:",", styling.popout_image_style_3).2 else if is_YGO() and not contains(card.notes, match:"!nopopout") then 194 else "0"}
		height: {if comma_count(styling.popout_image_style_3) == ",,,," then split_text(match:",", styling.popout_image_style_3).3 else if is_YGO() and not contains(card.notes, match:"!nopopout") then 196 else "0"}
		z index: 15
	############################# Card type
	indicator:
		left: { (if is_map() then 18 else if is_season() then 43 else 31) + (if is_clear() then 2 else 0)}
		top: { if is_clear() or is_map() then 298 else if is_thbland() then 449 else if is_full_art() then 332 else 300 }
		width: 17
		height: 17
		z index: 12
		render style: image
		visible: { has_identity() }
		image: { card_identity() }
	type:
		left: { if is_map() then 85 else if is_season() then (if styling.color_indicator_dot then 64 else 44)+(if is_clear() then 4 else 0) else (if styling.color_indicator_dot then 52 else 32) + (if is_clear() then 4 else 0) }
		top: { (if is_map() then 297.5 else if is_clear() then 294 else if is_thbland() then 444 else if is_full_art() then 329 else 296) + shrink_type() }
		width: { if use_box() and not any_box() then 0 else (if is_map() then 205 else (if styling.color_indicator_dot then "290" else "310") - (if card_style.rarity.width == 0 then 0 else max(22,card_style.rarity.content_width)) - (if is_season() then 12 else 0)) }
		height: { if use_box() and not any_box() then 0 else ((if is_map() then 18 else 20) - shrink_type()) }
		alignment: {if is_map() then "center top shrink-overflow" else "top shrink-overflow"}
		z index: 15
		padding top: 2
		padding bottom: 0
		padding right: 0
		font:
			name: Beleren Bold
			size: { (if is_map() then 12 else 13) - shrink_type() }
			color: {if white_type2() or is_fnm() then "white" else if black_type() or bevel_black_type() and not is_shifted() then "black" else if white_type() or is_full_art() or is_puma() or is_shifted() and not is_inverted() or black_type() then "white" else "black"}
			shadow color: {if is_full_art() or white_type2() or is_fnm() or is_puma() or is_shifted() and not black_type() or is_fnm() then "black" else if bevel_black_type() then "white" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 5
			separator color: red
	indicator 2:
		left: {(if is_adventure2() then 165 else if is_focus2() then 158 else 0) + (if has_identity2() then 30 else 0)}
		top: {355}
		width: 15
		height: 15
		z index: 2
		render style: image
		visible: {has_identity2()}
		image: {card_identity_2()}
	type 2:
		left: {if is_adventure2() then 197 else if is_adventure() then 32 else if is_focus2() then 194 else if is_focus() then 32 else 0}
		top: {(if is_adventure2() or is_adventure() then 352 else 358) + (shrink_type2())}
		width: {(if is_altcast() then 155 else 0) - (if has_identity2() then 20 else 0)}
		height: { 20 - shrink_type2() }
		alignment: top shrink-overflow
		z index: 16
		padding top: 2
		font:
			name: Beleren Bold
			size: { 11 - shrink_type2() }
			color: white
			separator color: red
	rarity:
		right: { if is_map() then 199 else if is_scrolls() then 334 else 344}
		top: { if is_map() then 53 else if is_clear() then 295 else if is_thbland() then 445 else if is_full_art() then 329 else 297 }
		width: {if set.shorten_types_for_rarity then 44 else 0}
		height: 22
		z index: 15
		render style: image
		visible: {not is_backdfc() or is_rem() and not (card.rarity == "basic land")}
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	sub_type:
		left: {if use_box() and not any_box() then 33 else 0}
		top: {if use_box() and not any_box() then 272 else 0}
		width: { if use_box() and not any_box() then 220 else 0}
		bottom: {if use_box() and not any_box() then 287 else 0}
		font:
			name: Beleren Bold
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 13 else 15)}
			scale down to: 7
			color: {"black"}
			#####shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 13 else 15)}
			scale down to: 7
		####remember to check if this does anything
		alignment: left shrink-overflow
		z index: 14
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.0
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	super_type:
		left: { if is_map() then 85 else if is_season() then (if styling.color_indicator_dot then 64 else 44)+(if is_clear() then 4 else 0) else (if styling.color_indicator_dot then 52 else 32) + (if is_clear() then 4 else 0) }
		top: { (if is_map() then 297.5 else if is_clear() then 294 else if is_thbland() then 444 else if is_full_art() then 329 else 296) + shrink_type() }
		width: { if use_box() and not any_box() then (if is_map() then 205 else (if styling.color_indicator_dot then "290" else "310") - (if card_style.rarity.width == 0 then 0 else max(22,card_style.rarity.content_width)) - (if is_season() then 12 else 0)) else 0 }
		height: { if use_box() and not any_box() then ((if is_map() then 18 else 20) - shrink_type()) else 0 }
		alignment: {if is_map() then "center top shrink-overflow" else "top shrink-overflow"}
		z index: 15
		padding top: 2
		padding bottom: 0
		padding right: 0
		font:
			name: Beleren Bold
			size: { (if is_map() then 12 else 13) - shrink_type() }
			color: {if white_type2() or is_fnm() then "white" else if black_type() or bevel_black_type() and not is_shifted() then "black" else if white_type() or is_full_art() or is_puma() or is_shifted() and not is_fnm() or is_inverted() or black_type() then "white" else "black"}
			shadow color: {if is_full_art() or white_type2() or is_puma() or is_shifted() and not black_type() or is_fnm() then "black" else if bevel_black_type() then "white" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
			shadow blur: 5
	############################# Text boxs
	text:
		left: { if (card.level_0 != "" or card.level_1 != "" or card.level_2 != "") then 75 else if is_map() then 40 else if is_focus2() or is_adventure2() then 27 else if is_focus() then 190 else if is_adventure() then 200 else 29}
		top: {top_of_textbox()}
		width: { if is_leveler() then 0 else (if(card.level_0 != "" or card.level_1 != "" or card.level_2 != "") then -46 else 0) + if is_map() then 287 else if is_focus2() or is_focus() then 154 else if is_adventure2() then 157 else if is_adventure() then 143 else 314 }
		bottom: {bottom_of_textbox()}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			color: { if black_text() or bevel_black_text() then "black" else if is_full_art() or is_fnm() or is_inverted() or white_text() or white_text2() or is_fnm() and not black_text() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else if white_text2() then "black" else if bevel_black_text() then "white" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 14
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	text 2:
		left: {if is_adventure2() then 190 else if is_adventure() then 29 else if is_focus2() then 188 else if is_focus() then 30 else if is_prototype() then 28 else 0}
		top: {if is_prototype() and not is_mutate() then 327.5 else if is_prototype() and is_mutate() then 394.7 else 381}
		width: {if is_adventure2() or is_adventure() then 157 else if is_focus2() or is_focus() then 158 else if is_prototype() then min(260, 324 - 20*number_of_symbols()) else 0}
		bottom: {if is_prototype() and not is_mutate() then 386 else if is_prototype() and is_mutate() then 451.2 else 481}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: 15
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 15
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 16
		padding left:   6
		padding right:  4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	############################# leveler
	level 1 text:
		left: { if is_leveler() and card.level_0 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29}
		top: {if is_mutate() then 329 else top_of_textbox()}
		right: { if is_leveler() then (if lone_pt() or card.pt == "" then 342 else 277) else if is_mutate() then 342 else if is_map() then 40 else 29}
		bottom: { if is_mutate() then 392 else if is_leveler() then (327+lv_1_height()) else bottom_of_textbox() }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				   then "middle center"
				else "middle left"
		z index: 13
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_1_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_1_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 2 text:
		left: { if is_leveler() then (if card.level_1 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29) else 0}
		top: { if is_leveler() then (329 + lv_2_coordinate()) else 0 }
		right: { if is_leveler() then (if card.pt_2 != "" then 277 else 342) else 0 }
		bottom: { if is_leveler() then (329 + lv_2_coordinate()) + lv_2_height()-2 else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 13
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_2_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_2_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 3 text:
		left: {if card.level_2 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29}
		top: {331 + lv_3_coordinate()}
		right: {if card.pt_3 != "" then 277 else 342}
		height: {if not is_leveler()then 0 else lv_3_height()-2}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 13
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_3_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_3_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 4 text:
		left: {if card.level_3 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29}
		top: {331 + lv_4_coordinate()}
		right: {if card.pt_7 != "" then 277 else 342}
		height: {if not is_leveler() then 0 else lv_4_height()-2}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
			color: { if is_full_art() or is_fnm() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 13
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_4_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_4_text) then 1.0 else 1.3 }
		line height line max: 1.6
	watermark:
		left: { if is_map() then 40 else if is_reversed() then 20 else if is_altcast() then 188 else 19 }
		top: { if is_full_art() then 359 else if is_prototype() then 384 else 330 }
		width: { if is_map() then 287 else if is_altcast() then 163 else 334 }
		height: { if is_map() then 154 else if is_full_art() then 120 else if is_prototype() then 100 else 152 }
		z index: 12
		render style: image
		popup style: in place
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks
	############################# Levels
	level 0:
		z index: 17
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l1_center() - (if aug_leveler(0) then 4 else 2) - (if center_label(0) then 6 else 0) + arrow_offset(0)}
		width: {if is_leveler() or card.level_0 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	22
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	level 1:
		z index: 17
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l2_center() - (if aug_leveler(1) then 4 else 2) - (if center_label(1) then 6 else 0) + arrow_offset(1)}
		height: 22
		width: {if is_leveler() or card.level_1 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	level 2:
		z index: 17
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l3_center() - (if aug_leveler(2) then 4 else 2) - (if center_label(2) then 6 else 0) + arrow_offset(2)}
		width: {if is_leveler() or card.level_2 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	22
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	level 3:
		z index: 17
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l4_center() - (if aug_leveler(3) then 4 else 2) - (if center_label(3) then 6 else 0) + arrow_offset(3)}
		width: {if is_leveler() or card.level_2 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	{ if card_style.level_4_text.height < 10 and card.level_3 == "" then 0 else 22}
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	############################# PT
	pt:
		z index: 15
		left: {if is_leveler() and not lone_pt() then 291 else 286}
		top: { if is_leveler() and not lone_pt() then (l1_center() - 14) else if is_map() then 467 else 469}
		width: {if starting_loyalty() and not is_leveler() then 0 else 60}
		height:	28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if is_shifted() and not black_name() or is_fnm() or is_inverted() or is_familiar() or is_familiarpt() or is_paradox() then "white" else if is_vehicle() and (not is_legend() or chosen(styling.other_options, choice:"brown legendary vehicle pt")) then "white" else if is_backdfc() then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() and not black_name() or is_fnm() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1

	pt 2:
		z index: 16
		left: 291
		top: {if is_prototype() and not is_mutate() then 355 else if is_prototype() and is_mutate() then 422.2 else (l2_center() - 12)}
		width: {if is_leveler() and not lone_pt() or card.pt_2 != "" then 60 else if is_prototype() then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() or is_prototype() then 14 else 16}
			color: {if is_shifted() and not black_name() or is_fnm() or is_inverted() or is_familiar() or is_paradox() or is_prototype() then "white" else if is_vehicle() and (not is_legend() or chosen(styling.other_options, choice:"brown legendary vehicle pt")) then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() and not black_name() or is_fnm() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 3:
		z index: 14
		left: 291
		top: {(l3_center() - 12)}
		width: {if is_leveler() and not lone_pt() or card.pt_3 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if is_shifted() and not black_name() or is_fnm() or is_inverted() or is_familiar() or is_paradox() then "white" else if is_vehicle() and (not is_legend() or chosen(styling.other_options, choice:"brown legendary vehicle pt")) then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() and not black_name() or is_fnm() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 7:
		z index: 14
		left: 291
		top: {(l4_center() - 12)}
		width: {if is_leveler() and not lone_pt() or card.pt_7 != "" then 60 else 0}
		height: {if card_style.level_4_text.height < 10 and card.pt_7 == "" then 0 else 28}
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if is_shifted() and not black_name() or is_fnm() or is_familiar() then "white" else if is_vehicle() and (not is_legend() or chosen(styling.other_options, choice:"brown legendary vehicle pt")) then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() and not black_name() or is_fnm() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	loyalty:
		z index: 17
		left: 326
		top: 468
		width: {if starting_loyalty() then 13.16 else 0}
		height:	34.63
		alignment: center middle
		font:
			name: Beleren Bold
			size: 14
			color: white
	############################# Card sorting / numbering
	set code:
		left: 24
		top: 498
		width: 40
		height: 10
		z index: 13
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	############################# Copyright stuff
	illustrator:
		left: {44 + card_style.set_code.content_width }
		top: 497.5
		width: 200
		height: 10
		z index: 13
		font:
			name: Beleren Small Caps Bold
			size: 7.25
			color: white
	copyright:
		right: 350
		top:
			{ 
				if is_leveler() and not lone_pt()
					then 488
				else if (starting_loyalty() and card.loyalty != "") or (card.pt != "" and not starting_loyalty())
					then 500
				else 488
			}
		width: {if set.automatic_copyright then 0 else 140}
		height: 10
		z index: 14
		alignment: middle right
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
############################################################## Extra card fields
extra card field:
	type: text
	name: card code
	save value: false
	script:
		if set.automatic_card_numbers and not (styling.remove_from_autocount or contains(styling.other_options, match: "edit card code")) then
			forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else if set.automatic_card_numbers and contains(styling.other_options, match: "edit card code") 
			then
			combined_editor(field1: card.custom_card_number, separator1: "/" + card_count_m15(), field2: card.card_code_text, separator2: " " + rarity_code() + " ", field3: card.card_code_text_2)
		else
			combined_editor(field1: card.custom_card_number, separator: " " + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type: choice
	name: artist arrow
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 2
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 3
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 4
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: stamp
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: foil stamp
	choice: stamp
	save value: false
	editable: false
extra card field:
	type: choice
	name: clear frame
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: gold frame
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: mirror frame
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card field:
	type: text
	name: auto copyright
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: mainframe rarity
	choice: rarity
	save value: false
	editable: false
extra card field:
	type: choice
	name: vehicle overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: adventure overlay
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: multiple choice
	name: adventure overlay2
	default: card.card_color_2
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: true
extra card field:
	type: choice
	name: adventure overlay3
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: multiple choice
	name: adventure overlay4
	default: card.card_color_2
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
extra card field:
	type: multiple choice
	name: focus overlay
	default: card.card_color_2
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
extra card field:
	type: multiple choice
	name: focus overlay2
	script: card.card_color_2
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
	show statistics: false
extra card field:
	type: choice
	name: snow overlay
	choice: snow
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: nyx overlay
	choice: nyx
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: paradox overlay
	choice: paradox
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: paradox pt
	choice: paradox
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: star overlay
	choice: star
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: space overlay
	choice: space
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: path overlay
	choice: path
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: norm overlay
	choice: norm
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: backdfc
	choice: backdfc
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: lush overlay
	choice: lush
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: familiar overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: arcun overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: Bevel overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: Gold Bevel overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: smallbox overlay
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: prototype pt
	script: card.card_color_2
	save value: false
	editable: false
extra card field:
	type: choice
	name: prototype cost
	script: card.card_color_2
	save value: false
	editable: false
extra card field:
	type: choice
	name: prototype overlay
	script: card.card_color_2
	save value: false
	editable: false
extra card field:
	type: choice
	name: sky overlay
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: frontier overlay
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: multiple choice
	name: pins
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
extra card field:
	type: choice
	name: miracle overlay
	choice: miracle
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: map frame
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: flavor bar
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: text
	name: tarot watermark
extra card field:
	type: choice
	name: curtain
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: scrolls
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: crown
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: text
	name: promo label
	save value: true
	description: The golden promo label.
extra card field:
	type: choice
	name: evobar
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar tip
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar start
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: sparkbar
	choice: spark
	save value: false
	editable: false
extra card field:
	type: choice
	name: sparkbar tip
	choice: spark
	save value: false
	editable: false
extra card field:
	type: choice
	name: sparkbar start
	choice: spark
	save value: false
	editable: false
extra card field:
	type: choice
	name: alias bar
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: alias bar 2
	script: card.card_color
	save value: false
	editable: false
# Add the word "LEVEL" to the top arrow.
extra card field:
	type: text
	name: lvl label 0
	editable: false
	save value: false
	script: if loy_leveler() then ":" else level_label(0)
# Add the word "LEVEL" to the second arrow.
extra card field:
	type: text
	name: lvl label 1
	editable: false
	save value: false
	script: if loy_leveler() then ":" else level_label(1)
# Add the word "LEVEL" to the third arrow.
extra card field:
	type: text
	name: lvl label 2
	editable: false
	save value: false
	script: if loy_leveler() then ":" else level_label(2)
# Add the word "LEVEL" to the fourth arrow.
extra card field:
	type: text
	name: lvl label 3
	editable: false
	save value: false
	script: if loy_leveler() then ":" else level_label(2)
extra card field:
	type: choice
	name: level 2 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 3 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 4 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 1
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 2
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 3
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 4
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: mutbar
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: color
	name: silver patch
	script: rgb(0,0,0)
extra card field:
	type: text
	name: ascend
	script: text_filter(value, card_name:card.name, margin_code:"unknown")
extra card field:
	type: choice
	name: season flag
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: loyalty box
	editable: false
	choice: loyalty
	save value: false
extra card field:
	type: choice
	name: stripe
	choice: stripe
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: stripe 2
	choice: stripe
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: node
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: corner
	choice: none
	choice: lesson
	choice: custom
	choice: sanctum
	choice: modal front
	choice: modal back
	choice: day
	choice: night
	choice: moon
	choice: eldrazi
	choice: compass
	choice: artifact
	choice: creature
	choice: enchantment
	choice: instant
	choice: land
	choice: multitype
	choice: sorcery
	choice: planeswalker
	choice: structure
	choice: aetherprint
	choice:
		name: sparker colors
		choice: white
		choice: blue
		choice: black
		choice: red
		choice: green
		choice: multicolor
		choice: colorless
	default: "lesson"
	save value: true
	editable: true
extra card field:
	type: multiple choice
	name: pride pin
	include file: /magic-pride.mse-include/pins
	save value: true
	editable: true
extra card field:
	type: text
	name: vorthos box
	save value: true
	editable: true
	description: Where they put mtgstory.com on story spotlights.
extra card field:
	type: text
	name: text2
	save value: true
	editable: true
	multi line: true
	description: Brave frontier comment box
extra card field:
	type: text
	name: text3
	save value: true
	editable: true
	multi line: true
	description: Brave frontier Brave Burst
extra card field:
	type: text
	name: text4
	save value: true
	editable: true
	multi line: true
	description: Brave frontier Brave Burst
extra card field:
	type: text
	name: text5
	save value: true
	editable: true
	multi line: true
	description: Brave frontier Brave Burst
extra card field:
	type: text
	name: smallbox text
	save value:true
	editable: true
	multi line: true
	description: smallbox
extra card field:
	type: multiple choice
	name: front modal flag
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: snow
	choice: land
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
extra card field:
	type: multiple choice
	name: back modal flag
	empty choice: colorless
	choice: white
	choice: blue
	choice: black
	choice: red
	choice: green
	choice:
		name: silver
		line below: true
	choice: artifact
	choice: snow
	choice: land
	choice: multicolor
	choice:
		name: hybrid
		line below: true
	choice:
		name: horizontal
		type: radio
	choice:
		name: vertical
		type: radio
	choice:
		name: radial
		type: radio
	choice:
		name: diagonal
		type: radio
	choice:
		name: overlay
		type: radio
	choice:
		name: reversed
	script: card_color_filter(value)
	show statistics: false
extra card field:
	type: text
	name: back type hint
	script: value
	save value: true
	editable: true
extra card field:
	type: text
	name: back color hint
	script: value
	save value: true
	editable: true
extra card field:
	type: text
	name: front type hint
	script: value
	save value: true
	editable: true
extra card field:
	type: text
	name: front color hint
	script: value
	save value: true
	editable: true
extra card field:
	type: choice
	name: Brave overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: comm box
	choice: car door
	save value: false
	editable: false
	
extra card style:
	promo label:
		left: 40
		top: { if is_full_art() then 295 else 262 }
		width: {if chosen(styling.other_options, choice:"prerelease stamp") then 295 else 0}
		height: 29
		alignment: middle right
		z index: 14
		font:
			name: ModMatrix
			size: 14
			color: rgb(223,169,41)
	card code:
		left: 24
		top: 488
		width: 120
		height: 10
		z index: 13
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	artist arrow:
		left: {28 + card_style.set_code.content_width }
		top: 500
		width: 12
		height: 7
		z index: 13
		render style: image
		image: artist_arrow.png
	pt box:
		left: {if is_leveler() and not lone_pt() then 278 else if is_map() then 270 else 273}
		top: { if is_leveler() and not lone_pt() then (l1_center() - (if is_map() then 26 else 18)) else if is_map() then 453 else 466}
		width: { if starting_loyalty() and not is_leveler() then 0 else if is_map() then 90 else 81}
		height:	{ if is_map() then 54 else 42}
		z index: 14
		visible: { card.pt != "" }
		render style: image
		image: { if is_map() then mappt_background() else if is_vehicle() and (not is_legend() or chosen(styling.other_options, choice:"brown legendary vehicle pt")) then "vpt.png" else if is_familiar() or is_familiarpt() then "fmpt.png" else if is_clear() and not is_backdfc() then "cpt.png" else if use_gold() then "goldpt.png" else if is_backdfc() then pt2() else choose_ptbox() }
	pt box 2:
		left: 278
		top: { l2_center() - (if is_map() then 26 else 15)}
		width: { if (is_leveler() and not lone_pt()) or card.pt_2 != "" then (if is_map() then 90 else 81) else 0}
		height:	{ if (is_leveler() and not lone_pt()) or card.pt_2 != "" then (if is_map() then 54 else 42) else 0}
		z index: 13
		visible: { card.pt_2 != "" and not is_prototype() }
		render style: image
		image: {if is_map() then mappt_background() else combine_blend(image1: lv_2_ptbox(), image2: "ptbox_multiply_1.png", combine: "multiply")}
	pt box 3:
		left: 278
		top: { l3_center() - (if is_map() then 26 else 15)}
		width: { if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 90 else 81) else 0}
		height:	{ if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 54 else 42) else 0}
		z index: 13
		visible: { card.pt_3 != "" }
		render style: image
		image: {if is_map() then mappt_background() else combine_blend(image1: lv_3_ptbox(), image2: "ptbox_multiply_2.png", combine: "multiply")}
	pt box 4:
		left: 278
		top: { l4_center() - (if is_map() then 26 else 15)}
		width: { if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 90 else 81) else 0}
		height:	{ if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 54 else 42) else 0}
		z index: 13
		visible: { card.pt_7 != "" }
		render style: image
		image: {if is_map() then mappt_background() else combine_blend(image1: lv_4_ptbox(), image2: "ptbox_multiply_3.png", combine: "multiply")}
	loyalty box:
		right: 362
		top: 466
		width: 60
		height: 38
		z index: 16
		render style: image
		visible: { starting_loyalty() and card.loyalty != "" }
		choice images:
			loyalty: loyalty.png
		image: {"loyalty.png"}
	stamp:
		left: 165
		top: 472
		width: 46
		height: 26
		z index: 12
		visible: { is_rare() and styling.use_holofoil_stamps and (is_devoid() or is_devoid2() or not is_clear()) }
		render style: image
		image: { if is_map() then "maps/holo_stamp.png" else if is_devoid() or is_devoid2() then "devoid/stamp.png" else card_stamp() }
		mask: {"imagemasks/stamp_mask.png"}
	foil stamp:
		left: 165
		top: 472
		width: 46
		height: 26
		z index: 13
		visible: { is_rare() and styling.use_holofoil_stamps}
		render style: image
		image: foil_stamp.png
	foil layer:
		left: 0
		top : 0
		width: 375
		height: 523
		z index: 19
		render style: image
		image: {if styling.overlay == "" then nil else styling.overlay + "/overlay.png"}
		mask: { "imagemasks/foil_mask" + (if card.pt != "" then "_pt") + (if is_rare() and styling.use_holofoil_stamps then "_rare") + ".png" }
	auto copyright:
		right: {if starting_loyalty() then 305 else 350}
		top:
			{ 
				if is_leveler() and not lone_pt()
					then 488
				else if (starting_loyalty() and card.loyalty != "") or (card.pt != "" and not starting_loyalty())
					then 504
				else 488
			}
		width: {if set.automatic_copyright then 140 else 0}
		height: 10
		z index: 14
		alignment: middle right
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
	nyx overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {nyx_background()}
		z index: 11
		visible: {is_nyx()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}

	star overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {star_background()}
		z index: 11
		visible: {is_star()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}
	space overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {space_background()}
		z index: 11
		visible: {is_space()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}
	path overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {path_background()}
		z index: 11
		visible: {is_path()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}
	norm overlay:
		left: 0
		top: {if is_clear() or is_devoid() or is_devoid2() then -1 else 0}
		width: 375
		height: 523
		render style: image
		image: {norm_overlay()}
		z index: 13
		visible: {is_norm()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}
	backdfc:
		left: 0
		top: {if is_clear() or is_devoid() or is_devoid2() then -1 else 0}
		width: 375
		height: 523
		render style: image
		image: {backdfc_background()}
		z index: 11
		visible: {is_backdfc()}
		mask: {"imagemasks/backdfcmask.png"}
	lush overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {lush_background()}
		z index: 11
		visible: {is_lush()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "mask.png")}
	sky overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {sky_background()}
		z index: 11
		visible: {is_sky()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "masksky.png")}
	frontier overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {frontier_background()}
		z index: 11
		visible: {is_frontier()}
		mask: {if is_puma() then "imagemasks/pumamask.png" else if is_YGO() then "imagemasks/YGOmask.png" else ("imagemasks/" + (if is_vehicle() then "v_" else "") + (if is_familiar() then "f_" else "") + (if is_full_art() then "full" else "") + "masksky.png")}
### FNM has a teeny mask because of a few pixel disagreements between it and normal frames
	crown:
		left: 0
		top: {if is_devoid() or is_devoid2() then 1 else 0}
		width: 375
		height: 523
		render style: image
		image: {if (is_clear() or clear_tops()) and not is_devoid() or is_devoid2() then "legend/xcrown.png" else if is_fnm() then set_mask(image:crown_background(), mask:"legend/fnm_mask.png") else crown_background()}
		z index: 15
		visible: {is_legend() and not is_map()}
		mask: {if is_legend() and styling.legend_crown != "custom" and (is_curtains() or is_expanded_art() or is_puma() or is_devoid() or is_devoid2() or is_YGO()) then "curtainmask.png" else if is_season() then "crown_season_mask.png" else ""}
	curtain:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if is_cons() then cons_background() else curtain_background()}
		z index: 10
		visible: {is_cons() or is_curtains()}
		mask: {if is_legend() and is_curtains() then "lcurtainmask.png"}
	scrolls:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if is_puma() then "puma.png" else (if is_full_art() then "full_" else "") + "consscrolls.png"}
		mask: {if is_puma() then "imagemasks/puma_mask3.png" else ""}
		z index: 11
		visible: {is_scrolls() or is_puma()}
	miracle overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if (is_clear() or clear_tops()) and not is_devoid() or is_devoid2() then "miracles/xmiracle.png" else miracle_background()}
		z index: 11
		visible: {is_miracle()}
	snow overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {snow_texture()}
		z index: 11
		mask: {"snow/snow_" + (if is_full_art() then "promo" else "fnm") + "_mask.png"}
		visible: {is_snow() and not pure_snow() and not is_expanded_art()}
	vehicle overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {"voverlay" + (if is_full_art() then "_full" else "") + ".png" }
		z index: 10
		visible: {is_vehicle()}
	adventure overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		popup style: in place
		image: {adventure_colors()}
		z index: 10
		visible: {is_adventure()}
	adventure overlay2:
		left: 20
		top: 327
		width: {if is_adventure() then 169 else 0}
		height: 155
		render style: image
		popup style: in place
		image: {adventure2_colors()}
		z index: 11
		visible: {is_adventure()}
	adventure overlay3:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		popup style: in place
		image: {adventure3_colors()}
		z index: 10
		visible: {is_adventure2()}
	adventure overlay4:
		left: 187
		top: 327
		width: {if is_adventure2() then 169 else 0}
		height: 155
		render style: image
		popup style: in place
		image: {adventure4_colors()}
		z index: 11
		visible: {is_adventure2()}
	focus overlay:
		left: 27
		top: 326
		width: {if is_focus() then 163 else 0}
		height: 157
		render style: image
		image: {focus_colors()}
		z index: 11
		visible: {is_focus()}
	focus overlay2:
		left: 185
		top: 326
		width: {if is_focus2() then 163 else 0}
		height: 157
		render style: image
		image: {focus2_colors()}
		z index: 11
		visible: {is_focus2()}
	familiar overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {"foverlay" + (if is_full_art() or is_clear() then "_full" else "") + ".png"}
		z index: 10
		visible: {is_familiar()}
	arcun overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: arcunoverlay.png
		z index: 11
		visible: {is_arcun()}
	Bevel overlay:
		left: 87
		top: {if is_skinned() then 78.5 else 74.5}
		width: 200
		height: 204
		render style: image
		image: {"bevel.png"}
		z index: 11
		visible: {is_YGO() and not contains(card.notes, match:"!nopopout")}
	Gold Bevel overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {"Gold-Bevel.png"}
		z index: 12
		visible: {is_YGO_gold()}
	smallbox overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {smallbox_colors()}
		z index: 13
		visible: {use_box()}
	prototype overlay:
		left: 25
		top: {if is_mutate() then 392.7 else 325.5}
		width: 324
		height: 60
		render style: image
		image: {prototype_colors()}
		z index: 14
		visible: {is_prototype()}
	prototype cost:
		left: 253
		top: {if is_mutate() then 395 else 327.8}
		width: 92
		height: 24
		render style: image
		image: {prototype_cost()}
		z index: 15
		visible: {is_prototype()}
	prototype pt:
		left: 288
		top: {if is_prototype() and is_mutate() then 419.8 else 352.6}
		width: {if card.pt_2 != "" then 66 else 0}
		height: 32
		render style: image
		image: {prototype_pt()}
		z index: 15
		visible: {is_prototype()}
	pins:
		left: 19
		top: 21
		width: {if use_pins() then 338 else 0}
		height: 465
		render style: image
		image: {pins_image()}
		z index: 13
		visible: {use_pins()}
	clear frame:
		left: 0
		top: 0
		width: 375
		height: 523
		z index: 11
		render style: image
		image: { if is_devoid() then devoid_background() else if is_devoid2() then devoid2_background() else if is_rare() and styling.use_holofoil_stamps then "clear_rare.png" else "clear.png"}
		visible: { is_clear() or is_devoid() or is_devoid2() or clear_tops()}
	gold frame:
		left: 0
		top: 0
		width: 375
		height: 523
		z index: 10
		render style: image
		image: {if use_gold() and not contains(card.notes, match:"!noborder") then "goldborder.png" else "gold.png"}
		visible: { use_gold()}
	mirror frame:
		left:	0
		top:	0
		width:	{if clear_tops() then 375 else 0}
		height:	523
		z index: 11
		render style: image
		popup style: in place
		image: { if not clear_tops() then "" else if is_fnm() then fnm_background() else if is_inverted() then inverted_background() else if is_paradox() then paradox_background() else if is_full_art() then promo_background() else card_background() }
		mask: {if clear_tops() then "imagemasks/clear_tops_mask.png" else ""}
	map frame:
		left: 0
		top: 0
		width: 375
		height: 523
		z index: 11
		render style: image
		image: { if is_map() then map_background() else energy_background() }
		visible: { is_map() or is_thbland() }
	evobar:
		left: {if is_map() then 15 else 27}
		top: {if is_map() then 62 else 57}
		width: {card_style.alias.content_width}
		height: 27
		z index: 12
		render style: image
		image: evobar.png
		visible: {use_evobar()}
	evobar tip:
		left: {(if is_map() then 14.6 else 26.6) + card_style.alias.content_width}
		top: {if is_map() then 62 else 57}
		width: 36
		height: 27
		z index: 12
		render style: image
		image: evobar_tip.png
		visible: {use_evobar()}
	sparkbar:
		left: {if is_map() then 15 else if is_clear() then 31 else 27}
		top: {if is_map() then 62 else if is_clear() then 269 else 272}
		width: {card_style.alias_2.content_width}
		height: 27
		z index: 12
		render style: image
		image: sparkbar.png
		visible: {use_sparkbar()}
	sparkbar tip:
		left: {(if is_map() then 14.6 else if is_clear() then 29.6 else 25.6) + card_style.alias_2.content_width}
		top: {if is_map() then 62 else if is_clear() then 269 else 272}
		width: 36
		height: 27
		z index: 12
		render style: image
		image: sparkbar_tip.png
		visible: {use_sparkbar()}
	flavor bar:
		left: {if is_reversed() then 10 else if is_altcast() then 175 else 0}
		top: { bar_equation() }
		width: {if is_altcast() then 188 else 375}
		height: 1
		z index: 11
		render style: image
		image: {if is_altcast() then "altflav.png" else "bar.png"}
		visible: { card.rule_text != "" and remove_tags(card.flavor_text) != "" and set.use_flavor_bar }
	tarot watermark:
		left: { if is_map() then 40 else 19 }
		top: { if is_full_art() then 359 else 330 }
		width: { if not is_tarot() then 0 else if is_map() then 287 else 334 }
		height: { if is_map() then 154 else if is_full_art() then 120 else 152 }
		z index: 12
		alignment: middle center
		font:
			name: MPlantin
			size: 90
			color: {rgba(0,0,0,40)}
	lvl label 0:
		left: {if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {l1_center() - (if loy_leveler() then 2 else 10) + arrow_offset(0)}
		width: {if is_leveler() or card.level_0 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if loy_leveler() then 10 else if center_label(0) then 0 else 10}
		z index: 16
		alignment: middle center
		font:
			name: {if loy_leveler() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler() then 15 else if length(level_label(0)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {card.level_0 != ""}
	lvl label 1:
		left: {if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {l2_center() - (if loy_leveler() then 2 else 10) + arrow_offset(1)}
		width: {if is_leveler() or card.level_1 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if loy_leveler() then 10 else if center_label(1) then 0 else 10}
		z index: 16
		alignment: middle center
		font:
			name: {if loy_leveler() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler() then 15 else if length(level_label(1)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {card.level_1 != ""}
	lvl label 2:
		left: {if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {l3_center() - (if loy_leveler() then 2 else 10) + arrow_offset(2)}
		width: {if is_leveler() or card.level_2 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if loy_leveler() then 10 else if center_label(2) then 0 else 10}
		z index: 16
		alignment: middle center
		font:
			name: {if loy_leveler() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler() then 15 else if length(level_label(2)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {card.level_2 != ""}
	lvl label 3:
		left: {if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {l4_center() - (if loy_leveler() then 2 else 10) + arrow_offset(3)}
		width: {if is_leveler() or card.level_3 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if loy_leveler() then 10 else if center_label(3) then 0 else 10}
		z index: 16
		alignment: middle center
		font:
			name: {if loy_leveler() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler() then 15 else if length(level_label(2)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {card.level_3 != ""}
	level 2 overlay:
		left: 29
		top: { if is_readable() then top_of_textbox() else if is_d20() then top_of_para(rolls_start(card.text)) else 329 + lv_2_coordinate()}
		height: {if is_readable() then bottom_of_textbox() else if is_d20() then height_of_para(rolls_start(card.text)) else lv_2_height()}
		width: 314
		z index: 12
		render style: image
		image: {overlay1()}
		visible: {(is_readable() and (card.rule_text != "")) or (is_d20() and number_of_rolls(card.text) > 0) or (is_leveler() and not is_full_art() and not is_map() and not is_fnm() and not is_inverted() and not is_clear())}
	level 3 overlay:
		left: 29
		top: { if is_readable() then 30 else if is_d20() then top_of_para(rolls_start(card.text)+2) else 329 + lv_3_coordinate()}
		height: {if is_readable() then 23 else if is_d20() then height_of_para(rolls_start(card.text)+2) else lv_3_height()}
		width: {if is_readable() then 319 else 314}
		z index: 12
		render style: image
		image: {overlay2()}
		visible: {(is_readable() and (card.name != "")) or (is_d20() and number_of_rolls(card.text)-no_roll(card.text) > 2) or (is_leveler() and not is_full_art() and not is_map() and not is_fnm() and not is_inverted() and not is_clear())}
	level 4 overlay:
		left: 29
		top: { if is_readable() then 300 else if is_d20() then top_of_para(rolls_start(card.text)+4) else 329 + lv_4_coordinate()}
		height: {if is_readable() then 17 else if is_d20() then height_of_para(rolls_start(card.text)+4) else lv_4_height()}
		width: 314
		z index: 12
		render style: image
		image: {overlay3()}
		visible: {(is_readable() and (to_text(card.type) != "")) or (is_d20() and number_of_rolls(card.text)-no_roll(card.text) > 4) or (is_leveler() and not is_full_art() and not is_map() and not is_fnm() and not is_inverted() and not is_clear())}
	arrow 1:
		z index: 15
		left: {arrow_left()}
		top: {l1_center() - 16 + arrow_offset(0)}
		width: {if card.level_0 != "" then arrow_width() else 0}
		height:	{arrow_height(0)}
		render style: image
		image: {if loy_leveler() then loyalty_image(card.level_0) else if box_leveler() then choose_ptbox() else arrow_background()}
	arrow 2:
		z index: 15
		left: {arrow_left()}
		top: {l2_center() - 16 + arrow_offset(1)}
		width: {if card.level_1 != "" then arrow_width() else 0}
		height:	{arrow_height(1)}
		render style: image
		image: {if loy_leveler() then loyalty_image(card.level_1) else if box_leveler() then choose_ptbox() else arrow_background()}
	arrow 3:
		z index: 15
		left: {arrow_left()}
		top: {l3_center() - 16 + arrow_offset(2)}
		width: {if card.level_2 != "" then arrow_width() else 0}
		height:	{arrow_height(2)}
		render style: image
		image: {if loy_leveler() then loyalty_image(card.level_2) else if box_leveler() then choose_ptbox() else arrow_background()}
	arrow 4:
		z index: 15
		left: {arrow_left()}
		top: {l4_center() - 16 + arrow_offset(3)}
		width: {if card.level_3 != "" then arrow_width() else 0}
		height:	{arrow_height(3)}
		render style: image
		image: {if loy_leveler() then loyalty_image(card.level_3) else if box_leveler() then choose_ptbox() else arrow_background()}
	mutbar:
		z index: 12
		left: 28
		top: 393
		height: 2
		width: 317
		render style: image
		image: mutbar.png
		visible: {is_mutate()}
	silver patch:
		left: 10
		top: 10
		width: 355
		height: 15
		z index: 12
		visible: {is_legend() and card.border_color == rgb(200,200,200)}
	season flag:
		left: 0
		top: 0
		width: 375
		height: 523
		z index: 13
		render style: image
		image: { season_background() }
		visible: { is_season() }
		mask: {if is_expanded_art() then "season/full_mask.png" else ""}
	ascend:
		left: 37
		top: 59
		width: {if is_season() then 300 else 0}
		height: 20
		angle: 270
		z index: 16
		alignment: justify-all force
		always symbol: true
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else 14}
			scale down to: 6
	alias bar:
		left: 38
		top: {if is_clear() or clear_tops() then 59 else 57}
		width: 298
		height: 21
		z index: 12
		render style: image
		image: {if is_devoid() or is_devoid2() then (if is_legend() then alias_bar() else "alias/devoidalias.png") else if is_clear() or clear_tops() then "alias/xalias.png" else alias_bar()}
		visible: {is_skinned() and not use_evobar()}
#	alias bar 2:
#		left: 38
#		top: {if is_clear() or clear_tops() then 59 else 57}
#		width: 298
#		height: 21
#		z index: 12
#		render style: image
#		image: {if is_devoid() or is_devoid2() then (if is_legend() then alias_bar() else "alias/devoidalias.png") else if is_clear() or clear_tops() then "alias/xalias.png" else alias2_bar()}
#		visible: {is_skinned() and not use_sparkbar()}
	node:
		left: 0
		top: 0
		height: 63
		width: 375
		z index: 16
		render style: image
		image: {node_background()}
		visible: {not is_map() and use_node()}
	corner:
		left: { if is_map() then 22 else 19}
		top: 25
		height: 31
		width: {if use_node() then 31 else 0}
		z index: 17
		render style: image
		visible: {use_node()}
		choice images:
			lesson: corners/lesson.png
			sanctum: corners/sanctum.png
			day: corners/sun_circle.png
			night: corners/night_circle.png
			modal front: corners/mdfc_up.png
			modal back: corners/mdfc_down.png
			eldrazi: corners/eldrazi.png
			moon: corners/moon.png
			compass: corners/compass.png
			artifact: corners/artifact.png
			creature: corners/creature.png
			enchantment: corners/enchantment.png
			instant: corners/instant.png
			land: corners/land.png
			multitype: corners/multitype.png
			sorcery: corners/sorcery.png
			planeswalker: corners/planeswalker.png
			structure: corners/structure.png
			compass: corners/compass.png
			aetherprint: corners/aetherprint.png
			sparker colors white: corners/wcorner.png
			sparker colors blue: corners/ucorner.png
			sparker colors black: corners/bcorner.png
			sparker colors red: corners/rcorner.png
			sparker colors green: corners/gcorner.png
			sparker colors multicolor: corners/mcorner.png
			sparker colors colorless: corners/ccorner.png
			custom: { if contains(styling.custom_symbol, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_symbol else "" }
	pride pin:
		left: {if is_legend() then 18 else 24}
		top: 58
		width: {if not is_pinned() then 0 else if is_legend() then 338 else 325}
		height: {if not is_pinned() then 0 else 234}
		z index: 17
		render style: image
		popup style: in place
		mask: {"/magic-pride.mse-include/masks/m15" + if is_legend() then " legend.png" else ".png"}
		image: {pin_image()}
	vorthos box:
		right: { if is_leveler() and not lone_pt() then 350 else if (starting_loyalty() and card.loyalty != "") then 300 else if (card.pt != "" and not starting_loyalty()) then 275 else 350 }
		top: {if card.pt == "" and shown_cr() then 500 else 488}
		width: { if is_leveler() and not lone_pt() then 140 else if (starting_loyalty() and card.loyalty != "") then 90 else if (card.pt != "" and not starting_loyalty()) then 65 else 140 }
		height: {if use_vorthos() then 10 else 0}
		z index: 13
		alignment: middle right
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
####################################### this is for the Brave Frontier Frame. It goes in order: Unit comment, burst name, burst cost, then burst ability
	text2:
		left: {if use_comm() then 34 else 0}
		top: {if use_comm() then 253 else 0}
		width: { if use_comm() then 240 else 0}
		bottom: {if use_comm() then 285 else 0}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() or use_comm() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
		alignment: middle shrink-overflow
		z index: 112
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.0
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	text3:
		left: {if use_bb() then 129 else 0}
		top: {if use_bb() then 420 else 0}
		width: { if use_bb() then 124 else 0 }
		bottom: {if use_bb() then 440 else 0 }
		font:
			name: { if is_map() then "Beleren Small Caps" else "Beleren Bold" }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
		alignment: middle shrink-overflow
		z index: 14
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.0
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	text4:
		left: {if use_bb() then 253 else 0}
		top: {if use_bb() then 420 else 0}
		width: { if use_bb() then 91 else 0}
		bottom: {if use_bb() then 440 else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			alignment: middle right
		always symbol: true
		z index: 12
		padding top: 0
		alignment: middle left shrink-overflow
		z index: 14
	text5:
		left: {if use_bb() then 29 else 0}
		top: {if use_bb() then 447 else 0}
		width: { if use_bb() then 314 else 0}
		bottom: {if use_bb() then 480 else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
			color: { if is_full_art() or is_fnm() or is_inverted() then "white" else "black"}
			shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 12 else 14)}
			scale down to: 6
		alignment: middle shrink-overflow
		z index: 14
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.0
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	smallbox text:
		left: {if use_box() and any_box() then 33 else 0}
		top: {if use_box() and any_box() then 272 else 0}
		width: {if use_box() and any_box() then 220 else 0}
		bottom: {if use_box() and any_box() then 287 else 0}
		font:
			name: Beleren Bold
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 13 else 15)}
			scale down to: 7
			color: {"black"}
			#####shadow color: {if is_full_art() or is_fnm() then "black" else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: {if styling.font_cap != "" then to_number(styling.font_cap) else (if is_mutate() then 13 else 15)}
			scale down to: 7
		####remember to check if this does anything
		alignment: left shrink-overflow
		z index: 14
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.0
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	front modal flag:
		left: 14
		top: 468
		width: {if chosen(styling.altered_plus_frames, choice: "back flag" )then 160 else 0}
		height: 20
		render style: image
		image: {front_flag_image()}
		z index: 15
		visible: {chosen(styling.altered_plus_frames, choice: "back flag") }
	front type hint:
		left: { if mainframe_walkerb() then 24 else 28}
		top: 471
		width: {if chosen(styling.altered_plus_frames, choice: "front flag" )then 80 else 0}
		height: 12
		z index: 18
		visible: {chosen(styling.altered_plus_frames, choice: "front flag") }
		font:
			name: Beleren Bold
			size: 9
			color: black
	front color hint:
		right: 161
		top: 471
		width: {if chosen(styling.altered_plus_frames, choice: "front flag" )then 80 else 0}
		height: 14
		z index: 17
		visible: {chosen(styling.altered_plus_frames, choice: "front flag") }
		font:
			name: MPlantin
			size: 10
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 10
			scale down to: 6
		alignment: right middle
	back modal flag:
		left: 14
		top: 468
		width: {if chosen(styling.altered_plus_frames, choice: "front flag" )then 160 else 0}
		height: 20
		render style: image
		image: {back_flag_image()}
		z index: 15
		visible: {chosen(styling.altered_plus_frames, choice: "front flag") }
	back type hint:
		left: 28
		top: 471
		width: {if chosen(styling.altered_plus_frames, choice: "back flag" )then 80 else 0}
		height: 12
		z index: 17
		visible: {chosen(styling.altered_plus_frames, choice: "back flag") }
		font:
			name: Beleren Bold
			size: 9
			color: white
	back color hint:
		right: 161
		top: 471
		width: {if chosen(styling.altered_plus_frames, choice: "back flag" )then 80 else 0}
		height: 14
		z index: 18
		visible: {chosen(styling.altered_plus_frames, choice: "back flag") }
		font:
			name: MPlantin
			size: 10
			color: white
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 10
			scale down to: 6
		alignment: right middle
	Brave overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {"boverlay.png"}
		z index: 11
		visible: {contains(card.notes, match:"!brave")}
	comm box:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {"commbox.png"}
		z index: 20
		visible: {use_comm()}
			